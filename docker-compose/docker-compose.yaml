version: '2.4'
services:
  # Description: This container will migrate the Postgres `frontend`,
  # `codeintel`, and `codeinsights` databases
  #
  # Disk: None
  # Ports: None
  #
  # This container should start after the database instance starts, perform the migrations
  # and then exit cleanly. After exiting the `frontend` service is allowed to start.
  #
  # If you're using a DB instance hosted outside of docker-compose, the environment variables
  # for this container will need to be updated to reflect the new connection information.
  migrator:
    container_name: migrator
    image: 'index.docker.io/sourcegraph/migrator:3.40.1@sha256:84ecc67b0874a3b3125c33b5548f6193126436d3bf10e3ab448a9fdeac1a21c7'
    cpus: 0.5
    mem_limit: '500m'
    command:
      ["up"]
    environment:
      - PGHOST=pgsql
      - PGPORT=5432
      - PGUSER=sg
      - PGPASSWORD=sg
      - PGDATABASE=sg
      - PGSSLMODE=disable

      - CODEINTEL_PGHOST=codeintel-db
      - CODEINTEL_PGPORT=5432
      - CODEINTEL_PGUSER=sg
      - CODEINTEL_PGPASSWORD=sg
      - CODEINTEL_PGDATABASE=sg
      - CODEINTEL_PGSSLMODE=disable

      # If you are not running code insights, please see: 
      # https://docs.sourcegraph.com/admin/install/docker-compose/operations#database-migrations for more information
      # for information on how to configure Sourcegraph migrations
      - CODEINSIGHTS_PGHOST=codeinsights-db
      - CODEINSIGHTS_PGPORT=5432
      - CODEINSIGHTS_PGUSER=postgres
      - CODEINSIGHTS_PGPASSWORD=password
      - CODEINSIGHTS_PGDATABASE=postgres
      - CODEINSIGHTS_PGSSLMODE=disable
    restart: "on-failure"
    networks: 
      - sourcegraph
    depends_on:
      pgsql:
        condition: service_healthy
      codeinsights-db:
        condition: service_healthy
      codeintel-db:
        condition: service_healthy

  # Description: Acts as a reverse proxy for all of the sourcegraph-frontend instances
  #
  # Disk: 1GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: 80 (HTTP) and 443 (HTTPS)
  #
  # Sourcegraph ships with a few builtin templates that cover common HTTP/HTTPS configurations:
  # - HTTP only (default)
  # - HTTPS with Let's Encrypt
  # - HTTPS with custom certificates
  #
  # Follow the directions in the comments below to swap between these configurations.
  #
  # If none of these built-in configurations suit your needs, then you can create your own Caddyfile, see:
  # https://caddyserver.com/docs/caddyfile
  caddy:
    container_name: caddy
    image: 'index.docker.io/caddy:2.4.6-alpine@sha256:b5a59725783bab0d65803f87028c68dd6611ca6184040bd98b18797cbe26bdd9'
    cpus: 4
    mem_limit: '4g'
    environment:
      - 'XDG_DATA_HOME=/caddy-storage/data'
      - 'XDG_CONFIG_HOME=/caddy-storage/config'
      - 'SRC_FRONTEND_ADDRESSES=sourcegraph-frontend-0:3080'
      # Uncomment & update this line when using Let's Encrypt or custom HTTPS certificates:
      # - 'SRC_SITE_ADDRESS=sourcegraph.example.com'
      #
      # Uncomment & update the following line when using HTTPS with Let's Encrypt
      # - 'SRC_ACME_EMAIL=admin@example.com'
    volumes:
      - 'caddy:/caddy-storage'
      #
      # Comment out the following line when using HTTPS with either Let's Encrypt or custom certificates
      - '../caddy/builtins/http.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with Let's Encrypt's staging environment
      # - '../caddy/builtins/https.lets-encrypt-staging.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with Let's Encrypt's production environment
      # IMPORTANT: Strongly recommended to test with the staging configuration above first, see that file for details.
      # - '../caddy/builtins/https.lets-encrypt-prod.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with custom certificates
      # - '../caddy/builtins/https.custom-cert.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment / update the following line when using HTTPS with custom certificates
      # - '/LOCAL/CERT/PATH.pem:/sourcegraph.pem'
      #
      # Uncomment / update the following line when using HTTPS with custom certificates
      # - '/LOCAL/KEY/PATH.key:/sourcegraph.key'
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'
    networks:
      - sourcegraph
    restart: always

  # Description: Serves the frontend of Sourcegraph via HTTP(S).
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 6060/TCP, 3080 (HTTP), and/or 3443 (HTTPS)
  # Ports exposed to the public internet: none
  #
  # Note: SRC_GIT_SERVERS, SEARCHER_URL, and SYMBOLS_URL are space-separated
  # lists which each allow you to specify more container instances for scaling
  # purposes. Be sure to also apply such a change here to the frontend-internal
  # service.
  sourcegraph-frontend-0:
    container_name: sourcegraph-frontend-0
    image: 'index.docker.io/sourcegraph/frontend:3.40.1@sha256:be5ec854f1168cf44f61ea46f6212721c158bc41595a64e33cbfe9b4bb84dcdd'
    cpus: 4
    mem_limit: '8g'
    environment:
      - DEPLOY_TYPE=docker-compose
      - JAEGER_AGENT_HOST=jaeger
      - PGHOST=pgsql
      - CODEINTEL_PGHOST=codeintel-db
      - CODEINSIGHTS_PGDATASOURCE=postgres://postgres:password@codeinsights-db:5432/postgres
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SRC_SYNTECT_SERVER=http://syntect-server:9238'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'SYMBOLS_URL=http://symbols-0:3184'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'REPO_UPDATER_URL=http://repo-updater:3182'
      - 'GRAFANA_SERVER_URL=http://grafana:3370'
      - 'JAEGER_SERVER_URL=http://jaeger:16686'
      - 'GITHUB_BASE_URL=http://github-proxy:3180'
      - 'PROMETHEUS_URL=http://prometheus:9090'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3080/healthz' -O /dev/null || exit 1"
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 300s
    volumes:
      - 'sourcegraph-frontend-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always
    depends_on:
      sourcegraph-frontend-internal:
        condition: service_healthy

  # Description: Serves the internal Sourcegraph frontend API.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3090/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  sourcegraph-frontend-internal:
    container_name: sourcegraph-frontend-internal
    image: 'index.docker.io/sourcegraph/frontend:3.40.1@sha256:be5ec854f1168cf44f61ea46f6212721c158bc41595a64e33cbfe9b4bb84dcdd'
    cpus: 4
    mem_limit: '8g'
    environment:
      - DEPLOY_TYPE=docker-compose
      - PGHOST=pgsql
      - CODEINTEL_PGHOST=codeintel-db
      - CODEINSIGHTS_PGDATASOURCE=postgres://postgres:password@codeinsights-db:5432/postgres
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SRC_SYNTECT_SERVER=http://syntect-server:9238'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'SYMBOLS_URL=http://symbols-0:3184'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'REPO_UPDATER_URL=http://repo-updater:3182'
      - 'GRAFANA_SERVER_URL=http://grafana:3000'
      - 'JAEGER_SERVER_URL=http://jaeger:16686'
      - 'GITHUB_BASE_URL=http://github-proxy:3180'
      - 'PROMETHEUS_URL=http://prometheus:9090'
    volumes:
      - 'sourcegraph-frontend-internal-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3080/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 300s
    depends_on:
      pgsql:
        condition: service_healthy
      codeintel-db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully

  # Description: Stores clones of repositories to perform Git operations.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 3178/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  gitserver-0:
    container_name: gitserver-0
    image: 'index.docker.io/sourcegraph/gitserver:3.40.1@sha256:22d477c3c6c91a6bc737830ebdd7ecda70b7030bfc11a1a9c23f7905f061fb49'
    cpus: 4
    mem_limit: '8g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
    volumes:
      - 'gitserver-0:/data/repos'
    networks:
      - sourcegraph
    restart: always
    hostname: gitserver-0

  # Description: Backend for indexed text search operations.
  #
  # Disk: 200GB / persistent SSD
  # Network: 100mbps
  # Liveness probe: n/a
  # Ports exposed to other Sourcegraph services: 6072/TCP
  # Ports exposed to the public internet: none
  #
  zoekt-indexserver-0:
    container_name: zoekt-indexserver-0
    image: 'index.docker.io/sourcegraph/search-indexer:3.40.1@sha256:7b1a411dc8a207f4f1743edd2377ae2a5cad4ae4801a9a0388b31bc24db23fa5'
    cpus: 8
    mem_limit: '16g'
    environment:
      - 'HOSTNAME=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=http://sourcegraph-frontend-internal:3090'
    volumes:
      - 'zoekt-0-shared:/data/index'
    networks:
      - sourcegraph
    restart: always
    hostname: zoekt-indexserver-0

  # Description: Backend for indexed text search operations.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6070/TCP
  # Ports exposed to the public internet: none
  #
  zoekt-webserver-0:
    container_name: zoekt-webserver-0
    image: 'index.docker.io/sourcegraph/indexed-searcher:3.40.1@sha256:1d58bab3cdcae0b13361676f12658a2257f322c17e2bf417995b0e1a53d9a595'
    cpus: 8
    mem_limit: '50g'
    environment:
      - 'HOSTNAME=zoekt-webserver-0:6070'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:6070/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 3
    volumes:
      - 'zoekt-0-shared:/data/index'
    networks:
      - sourcegraph
    restart: always
    hostname: zoekt-webserver-0

  # Description: Backend for text search operations.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3181/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  searcher-0:
    container_name: searcher-0
    image: 'index.docker.io/sourcegraph/searcher:3.40.1@sha256:2fede44e119f3422b84525c0386827c2b22d6efcf6d4a20c15932cfa84c95d00'
    cpus: 2
    mem_limit: '2g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3181/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 3
    volumes:
      - 'searcher-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Rate-limiting proxy for the GitHub API.
  #
  # CPU: 1
  # Memory: 1GB
  # Disk: 1GB / non-persistent SSD (only for read-only config file)
  # Ports exposed to other Sourcegraph services: 3180/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  github-proxy:
    container_name: github-proxy
    image: 'index.docker.io/sourcegraph/github-proxy:3.40.1@sha256:a78cb1a7ee2e05d4fa9e15c131085c6889297a8db9c80e9bbca9543f3cee9bab'
    cpus: 1
    mem_limit: '1g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
    networks:
      - sourcegraph
    restart: always

  # Description: Handles conversion of uploaded precise code intelligence bundles.
  #
  # Ports exposed to other Sourcegraph services: 3188/TCP
  # Ports exposed to the public internet: none
  #
  precise-code-intel-worker:
    container_name: precise-code-intel-worker
    image: 'index.docker.io/sourcegraph/precise-code-intel-worker:3.40.1@sha256:a7e2190cffb204660c62a0e86dbcf3dbac5e9f130a88e716b99c87efc83f36e9'
    cpus: 2
    mem_limit: '4g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3188/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - sourcegraph
    restart: always

  # Description: Handles repository metadata (not Git data) lookups and updates from external code hosts and other similar services.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3182/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  repo-updater:
    container_name: repo-updater
    image: 'index.docker.io/sourcegraph/repo-updater:3.40.1@sha256:2008ab28e41d1940d04913bf9cbda7a6573a3f2179486c14bbc3af20041ed2d4'
    cpus: 4
    mem_limit: '4g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
      - 'GITHUB_BASE_URL=http://github-proxy:3180'
    volumes:
      - 'repo-updater:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Manages background processes.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3189/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  worker:
    container_name: worker
    image: 'index.docker.io/sourcegraph/worker:3.40.1@sha256:37229c2e513b9ccecd95227a12edd8b7edbd3d18b61dcde2b2cda95b725b8fb2'
    cpus: 4
    mem_limit: '4g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'SYMBOLS_URL=http://symbols-0:3184'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'GITHUB_BASE_URL=http://github-proxy:3180'
    volumes:
      - 'worker:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for syntax highlighting operations.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 9238/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  syntect-server:
    container_name: syntect-server
    image: 'index.docker.io/sourcegraph/syntax-highlighter:3.40.1@sha256:e4e1835ed91ded3e0e396b531a1de3dcf743069d3665d234049e4491b0cec881'
    cpus: 4
    mem_limit: '6g'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:9238/health' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for symbols operations.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3184/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  symbols-0:
    container_name: symbols-0
    image: 'index.docker.io/sourcegraph/symbols:3.40.1@sha256:36964ab3f87562ae11aa07542ae650168a8d1b2bf4c18628ba6b5af45d300f50'
    cpus: 2
    mem_limit: '4g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3184/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 60s
    volumes:
      - 'symbols-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Prometheus collects metrics and aggregates them into graphs.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: none (HTTP 9090 should be exposed to admins only)
  #
  prometheus:
    container_name: prometheus
    image: 'index.docker.io/sourcegraph/prometheus:3.40.1@sha256:87b3f92468f704f388722de48e3cf672a3d438bde86da287e16923973375c784'
    cpus: 4
    mem_limit: '8g'
    volumes:
      - 'prometheus-v2:/prometheus'
      - '../prometheus:/sg_prometheus_add_ons'
    ports:
      - '0.0.0.0:9090:9090'
    networks:
      - sourcegraph
    restart: always
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'

  # Description: Dashboards and graphs for Prometheus metrics.
  #
  # Disk: 2GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: none (HTTP 3370 should be exposed to admins only)
  #
  # Add the following environment variables if you wish to use an auth proxy with Grafana:
  #
  # 'GF_AUTH_PROXY_ENABLED=true'
  # 'GF_AUTH_PROXY_HEADER_NAME='X-Forwarded-User'
  # 'GF_SERVER_ROOT_URL='https://grafana.example.com'
  grafana:
    container_name: grafana
    image: 'index.docker.io/sourcegraph/grafana:3.40.1@sha256:bbc1e9ee433163416972211095f7096c782fb9258d198dd52d61c8c15e5144bc'
    cpus: 1
    mem_limit: '1g'
    volumes:
      - 'grafana:/var/lib/grafana'
      - '../grafana/datasources:/sg_config_grafana/provisioning/datasources'
      - '../grafana/dashboards:/sg_grafana_additional_dashboards'
    ports:
      - '0.0.0.0:3370:3370'
    networks:
      - sourcegraph
    restart: always

  # Description: Publishes Prometheus metrics about Docker containers.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 8080/TCP
  # Ports exposed to the public internet: none
  #
  cadvisor:
    container_name: cadvisor
    image: 'index.docker.io/sourcegraph/cadvisor:3.40.1@sha256:16f2e8472a623fd27f76b859db8e6804d4c1dee439fd583193e0df92a11fb616'
    cpus: 1
    mem_limit: '1g'
    # You may set `privileged` to `false and `cadvisor` will run with reduced privileges.
    # `cadvisor` requires root privileges in order to display provisioning metrics.
    # These metrics provide critical information to help you scale the Sourcegraph deployment.
    # If you would like to bring your own infrastructure monitoring & alerting solution,
    # you may want to remove the `cadvisor` container completely 
    privileged: true
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:ro'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
      - '/dev/disk/:/dev/disk:ro'
      # Uncomment to enable container monitoring on MacOS
      # - '/var/run/docker.sock:/var/run/docker.sock:ro'
    devices:
      - '/dev/kmsg'
    networks:
      - sourcegraph
    restart: always
    command:
      - --port=8080

  # Description: Jaeger all-in-one instance
  # (https://www.jaegertracing.io/docs/1.17/getting-started/#all-in-one) for distributed tracing.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 5778/TCP 6831/UDP 6832/UDP 14250/TCP
  # Ports exposed to the public internet: none
  # Ports exposed to site admins only: 16686/HTTP
  #
  jaeger:
    container_name: jaeger
    image: 'index.docker.io/sourcegraph/jaeger-all-in-one:3.40.1@sha256:06cdac4f810676d5a5df1c5b4f111cc1135a5b8bea4813024fe4b04de9854154'
    cpus: 0.5
    mem_limit: '512m'
    ports:
      # Query port
      - '0.0.0.0:16686:16686'
      # Collector port
      - '0.0.0.0:14250:14250'
      # Agent ports
      - '0.0.0.0:5778:5778'
      - '0.0.0.0:6831:6831'
      - '0.0.0.0:6832:6832'
    networks:
      - sourcegraph
    restart: always
    command: ['--memory.max-traces=20000']
    environment:
      - 'SAMPLING_STRATEGIES_FILE=/etc/jaeger/sampling_strategies.json'

  # Description: PostgreSQL database for various data.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 5432/TCP 9187/TCP
  # Ports exposed to the public internet: none
  #
  pgsql:
    container_name: pgsql
    image: 'index.docker.io/sourcegraph/postgres-12-alpine:3.40.1@sha256:5e45a61178f9859420fd082b70017dc56dff54179bace8f5b693e464ba500010'
    cpus: 4
    mem_limit: '4g'
    shm_size: '1g'
    healthcheck:
      test: '/liveness.sh'
      interval: 10s
      timeout: 1s
      retries: 10
      start_period: 15s
    volumes:
      - 'pgsql:/data/'
      - '../pgsql/conf:/conf/'
    networks:
      - sourcegraph
    restart: always
    stop_grace_period: 120s

  # Description: This container will collect and expose prometheus metrics about `pgsql` PostgreSQL server.
  #
  # Disk: None
  # Ports exposed to other Sourcegraph services: 9187/TCP
  # Ports exposed to the public internet: none
  #
  # If you're using a DB instance hosted outside of docker-compose, the environment variables
  # for this container will need to be updated to reflect the new connection information.
  pgsql-exporter:
    container_name: pgsql-exporter
    image: 'index.docker.io/sourcegraph/postgres_exporter:3.40.1@sha256:876a03b7cc99aedd411a6d31b5bc843b407ac96c9f085677eb9af8d719817f54'
    cpus: 0.1
    mem_limit: '50m'
    networks:
      - sourcegraph
    restart: always
    environment:
      - 'DATA_SOURCE_NAME=postgres://sg:@pgsql:5432/?sslmode=disable'
      - 'PG_EXPORTER_EXTEND_QUERY_PATH=/config/queries.yaml'

  # Description: PostgreSQL database for code intelligence data.
  #
  # Disk: 128GB / persistent SSD
  # Network: 1Gbps
  # Ports exposed to other Sourcegraph services: 5432/TCP 9187/TCP
  # Ports exposed to the public internet: none
  #
  codeintel-db:
    container_name: codeintel-db
    image: 'index.docker.io/sourcegraph/codeintel-db:3.40.1@sha256:fcd6fb41d8625dc2a245fa2f184c973ba4fcf68ae33bc2b73969a4582d00a53c'
    cpus: 4
    mem_limit: '4g'
    shm_size: '1g'
    healthcheck:
      test: '/liveness.sh'
      interval: 10s
      timeout: 1s
      retries: 10
      start_period: 15s
    volumes:
      - 'codeintel-db:/data/'
      - '../codeintel-db/conf:/conf/'
    networks:
      - sourcegraph
    restart: always
    stop_grace_period: 120s

  # Description: This container will collect and expose prometheus metrics about `codeintel-db` PostgreSQL server.
  #
  # Disk: None
  # Ports exposed to other Sourcegraph services: 9187/TCP
  # Ports exposed to the public internet: none
  #
  # If you're using a DB instance hosted outside of docker-compose, the environment variables
  # for this container will need to be updated to reflect the new connection information.
  codeintel-db-exporter:
    container_name: codeintel-db-exporter
    image: 'index.docker.io/sourcegraph/postgres_exporter:3.40.1@sha256:876a03b7cc99aedd411a6d31b5bc843b407ac96c9f085677eb9af8d719817f54'
    cpus: 0.1
    mem_limit: '50m'
    networks:
      - sourcegraph
    restart: always
    environment:
      - 'DATA_SOURCE_NAME=postgres://sg:@codeintel-db:5432/?sslmode=disable'
      - 'PG_EXPORTER_EXTEND_QUERY_PATH=/config/code_intel_queries.yaml'

  # Description: PostgreSQL database for code insights data.
  #
  # Disk: 128GB / persistent SSD
  # Network: 1Gbps
  # Ports exposed to other Sourcegraph services: 5432/TCP 9187/TCP
  # Ports exposed to the public internet: none
  #
  codeinsights-db:
    container_name: codeinsights-db
    image: 'index.docker.io/sourcegraph/codeinsights-db:3.40.1@sha256:36475b0d2b3ccc5d4c5eab6c5c0c6e5dc0b41f8775fc5174c754645b73e78d62'
    cpus: 4
    mem_limit: '2g'
    shm_size: '1g'
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: '/liveness.sh'
      interval: 10s
      timeout: 1s
      retries: 10
      start_period: 15s
    volumes:
      - 'codeinsights-db:/var/lib/postgresql/data/'
      - '../codeinsights-db/conf:/conf/'
    networks:
      - sourcegraph
    restart: always
    stop_grace_period: 120s

  # Description: This container will collect and expose prometheus metrics about `codeinsights-db` PostgreSQL server.
  #
  # Disk: None
  # Ports exposed to other Sourcegraph services: 9187/TCP
  # Ports exposed to the public internet: none
  #
  # If you're using a DB instance hosted outside of docker-compose, the environment variables
  # for this container will need to be updated to reflect the new connection information.
  codeinsights-db-exporter:
    container_name: codeinsights-db-exporter
    image: 'index.docker.io/sourcegraph/postgres_exporter:3.40.1@sha256:876a03b7cc99aedd411a6d31b5bc843b407ac96c9f085677eb9af8d719817f54'
    cpus: 0.1
    mem_limit: '50m'
    networks:
      - sourcegraph
    restart: always
    environment:
      - 'DATA_SOURCE_NAME=postgres://postgres:password@codeinsights-db:5432/?sslmode=disable'
      - 'PG_EXPORTER_EXTEND_QUERY_PATH=/config/code_insights_queries.yaml'

  # Description: MinIO for storing LSIF uploads.
  #
  # Disk: 128GB / persistent SSD
  # Network: 1Gbps
  # Ports exposed to other Sourcegraph services: 9000/TCP
  # Ports exposed to public internet: none
  #
  minio:
    container_name: minio
    image: 'index.docker.io/sourcegraph/minio:3.40.1@sha256:d5377e0c6e4ed742c551f253591d4a1a7f3a104ca17c51d46d6324206577f209'
    cpus: 1
    mem_limit: '1g'
    environment:
      - 'MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE'
      - 'MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://127.0.0.1:9000/minio/health/live']
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 15s
    volumes:
      - 'minio:/data'
    networks:
      - sourcegraph
    restart: always
    command: ['server', '/data']

  # Description: Redis for storing short-lived caches.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6379/TCP 9121/TCP
  # Ports exposed to the public internet: none
  #
  redis-cache:
    container_name: redis-cache
    image: 'index.docker.io/sourcegraph/redis-cache:3.40.1@sha256:221f92f5a11a33f1b1d82ff2a88c06c9eadcc17d8bfbfb157e0a711a3d180395'
    cpus: 1
    mem_limit: '7g'
    volumes:
      - 'redis-cache:/redis-data'
    networks:
      - sourcegraph
    restart: always
  # Description: Redis for storing semi-persistent data like user sessions.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6379/TCP 9121/TCP
  # Ports exposed to the public internet: none
  #
  redis-store:
    container_name: redis-store
    image: 'index.docker.io/sourcegraph/redis-store:3.40.1@sha256:cdd2a474ca749f4221e68ea7be74aa13c05c4ae2ee925be55fbe537fe7317180'
    cpus: 1
    mem_limit: '7g'
    volumes:
      - 'redis-store:/redis-data'
    networks:
      - sourcegraph
    restart: always

volumes:
  caddy:
  gitserver-0:
  grafana:
  pgsql:
  codeintel-db:
  codeinsights-db:
  minio:
  prometheus-v2:
  redis-cache:
  redis-store:
  repo-updater:
  worker:
  searcher-0:
  sourcegraph-frontend-0:
  sourcegraph-frontend-internal-0:
  symbols-0:
  zoekt-0-shared:
networks:
  sourcegraph:
