version: '2.4'
services:
  # Description: This container will migrate the Postgres `frontend`,
  # `codeintel`, and `codeinsights` databases
  #
  # Disk: None
  # Ports: None
  #
  # This container should start after the database instance starts, perform the migrations
  # and then exit cleanly. After exiting the `frontend` service is allowed to start.
  #
  # If you're using a DB instance hosted outside of docker-compose, the environment variables
  # for this container will need to be updated to reflect the new connection information.
  migrator:
    container_name: migrator
    image: 'index.docker.io/sourcegraph/migrator:6.6.868@sha256:ce409a8dbee0c004b1b380b2b8889e86ad77666c5666050106d7820f81392248'
    cpus: 0.5
    mem_limit: '500m'
    command: ['up']
    environment:
      - PGHOST=pgsql
      - PGPORT=5432
      - PGUSER=sg
      - PGPASSWORD=sg
      - PGDATABASE=sg
      - PGSSLMODE=disable

      - CODEINTEL_PGHOST=codeintel-db
      - CODEINTEL_PGPORT=5432
      - CODEINTEL_PGUSER=sg
      - CODEINTEL_PGPASSWORD=sg
      - CODEINTEL_PGDATABASE=sg
      - CODEINTEL_PGSSLMODE=disable

      # If you are not running code insights, please see:
      # https://docs.sourcegraph.com/admin/install/docker-compose/operations#database-migrations for more information
      # for information on how to configure Sourcegraph migrations
      - CODEINSIGHTS_PGHOST=codeinsights-db
      - CODEINSIGHTS_PGPORT=5432
      - CODEINSIGHTS_PGUSER=postgres
      - CODEINSIGHTS_PGPASSWORD=password
      - CODEINSIGHTS_PGDATABASE=postgres
      - CODEINSIGHTS_PGSSLMODE=disable
    restart: 'on-failure'
    networks:
      - sourcegraph
    depends_on:
      pgsql:
        condition: service_healthy
      codeinsights-db:
        condition: service_healthy
      codeintel-db:
        condition: service_healthy

  # Description: Acts as a reverse proxy for all of the sourcegraph-frontend instances
  #
  # Disk: 1GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: 80 (HTTP) and 443 (HTTPS)
  #
  # Sourcegraph ships with a few builtin templates that cover common HTTP/HTTPS configurations:
  # - HTTP only (default)
  # - HTTPS with Let's Encrypt
  # - HTTPS with custom certificates
  #
  # Follow the directions in the comments below to swap between these configurations.
  #
  # If none of these built-in configurations suit your needs, then you can create your own Caddyfile, see:
  # https://caddyserver.com/docs/caddyfile
  caddy:
    container_name: caddy
    image: 'index.docker.io/sourcegraph/caddy:6.6.868@sha256:90fe211dc049ed5c395e23d0a9bcfa0ebdce514a6e59c45dc4a6df57f7ea5683'
    cpus: 4
    mem_limit: '4g'
    environment:
      - 'XDG_DATA_HOME=/caddy-storage/data'
      - 'XDG_CONFIG_HOME=/caddy-storage/config'
      - 'SRC_FRONTEND_ADDRESSES=sourcegraph-frontend-0:3080'
      # Uncomment & update this line when using Let's Encrypt or custom HTTPS certificates:
      # - 'SRC_SITE_ADDRESS=sourcegraph.example.com'
      #
      # Uncomment & update the following line when using HTTPS with Let's Encrypt
      # - 'SRC_ACME_EMAIL=admin@example.com'
    volumes:
      - 'caddy:/caddy-storage'
      #
      # IMPORTANT: if a customer uses a reverse proxy in front of Caddy
      # the configuration files below must be updated to include trusted_proxies
      #
      # Comment out the following line when using HTTPS with either Let's Encrypt or custom certificates
      - '../caddy/builtins/http.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with Let's Encrypt's staging environment
      # - '../caddy/builtins/https.lets-encrypt-staging.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with Let's Encrypt's production environment
      # IMPORTANT: Strongly recommended to test with the staging configuration above first, see that file for details.
      # - '../caddy/builtins/https.lets-encrypt-prod.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with custom certificates
      # - '../caddy/builtins/https.custom-cert.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment / update the following line when using HTTPS with custom certificates
      # - '/LOCAL/CERT/PATH.pem:/sourcegraph.pem'
      #
      # Uncomment / update the following line when using HTTPS with custom certificates
      # - '/LOCAL/KEY/PATH.key:/sourcegraph.key'
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'
    networks:
      - sourcegraph
    restart: always

  # Description: Serves the frontend of Sourcegraph via HTTP(S).
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 6060/TCP, 3080 (HTTP), and/or 3443 (HTTPS)
  # Ports exposed to the public internet: none
  #
  # Note: SRC_GIT_SERVERS, and SEARCHER_URL are space-separated
  # lists which each allow you to specify more container instances for scaling
  # purposes. Be sure to also apply such a change here to the frontend-internal
  # service.
  sourcegraph-frontend-0:
    container_name: sourcegraph-frontend-0
    image: 'index.docker.io/sourcegraph/frontend:6.6.868@sha256:cac945a3ff37f33894dc1ae3102a2b59a58f84af68bca814e01df88ac7e3b2a7'
    cpus: 4
    mem_limit: '8g'
    environment:
      - DEPLOY_TYPE=docker-compose
      - 'OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317'
      - PGHOST=pgsql
      - CODEINTEL_PGHOST=codeintel-db
      - CODEINSIGHTS_PGDATASOURCE=postgres://postgres:password@codeinsights-db:5432/postgres
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SRC_SYNTECT_SERVER=http://syntect-server:9238'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'INDEXED_SEARCH_INDEXER=zoekt-indexserver-0:6072'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'GRAFANA_SERVER_URL=http://grafana:3370'
      - 'PROMETHEUS_URL=http://prometheus:9090'
      - 'PRECISE_CODE_INTEL_UPLOAD_BACKEND=blobstore'
      - 'PRECISE_CODE_INTEL_UPLOAD_AWS_ENDPOINT=http://blobstore:9000'
      - |
        SRC_PROF_SERVICES=
          [
            { "Name": "frontend-0", "Host": "sourcegraph-frontend-0:6060" },
            { "Name": "frontend-internal-0", "Host": "sourcegraph-frontend-internal:6060" },
            { "Name": "gitserver-0", "Host": "gitserver-0:6060" },
            { "Name": "searcher-0", "Host": "searcher-0:6060" },
            { "Name": "worker", "Host": "worker:6060" },
            { "Name": "zoekt-indexserver-0", "Host": "zoekt-indexserver-0:6072" },
            { "Name": "zoekt-webserver-0", "Host": "zoekt-webserver-0:6070", "DefaultPath": "/debug/requests/" }
          ]
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3080/healthz' -O /dev/null || exit 1"
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 300s
    volumes:
      - 'sourcegraph-frontend-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always
    depends_on:
      sourcegraph-frontend-internal:
        condition: service_healthy

  # Description: Serves the internal Sourcegraph frontend API.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3090/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  sourcegraph-frontend-internal:
    container_name: sourcegraph-frontend-internal
    image: 'index.docker.io/sourcegraph/frontend:6.6.868@sha256:cac945a3ff37f33894dc1ae3102a2b59a58f84af68bca814e01df88ac7e3b2a7'
    cpus: 4
    mem_limit: '8g'
    environment:
      - DEPLOY_TYPE=docker-compose
      - PGHOST=pgsql
      - CODEINTEL_PGHOST=codeintel-db
      - CODEINSIGHTS_PGDATASOURCE=postgres://postgres:password@codeinsights-db:5432/postgres
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SRC_SYNTECT_SERVER=http://syntect-server:9238'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'INDEXED_SEARCH_INDEXER=zoekt-indexserver-0:6072'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'GRAFANA_SERVER_URL=http://grafana:3370'
      - 'PROMETHEUS_URL=http://prometheus:9090'
      - 'PRECISE_CODE_INTEL_UPLOAD_BACKEND=blobstore'
      - 'PRECISE_CODE_INTEL_UPLOAD_AWS_ENDPOINT=http://blobstore:9000'
      - 'OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317'
    volumes:
      - 'sourcegraph-frontend-internal-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3080/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 300s
    depends_on:
      pgsql:
        condition: service_healthy
      codeintel-db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully

  # Description: Stores clones of repositories to perform Git operations.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 3178/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  gitserver-0:
    container_name: gitserver-0
    image: 'index.docker.io/sourcegraph/gitserver:6.6.868@sha256:304800860a46f22dafa63730e5d16c114f857a9c21353bfaf5d64a2f0502f34a'
    cpus: 4
    mem_limit: '8g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317'
    volumes:
      - 'gitserver-0:/data/repos'
    networks:
      - sourcegraph
    restart: always
    hostname: gitserver-0

  # Description: Backend for indexed text search operations.
  #
  # Disk: 200GB / persistent SSD
  # Network: 100mbps
  # Liveness probe: n/a
  # Ports exposed to other Sourcegraph services: 6072/TCP
  # Ports exposed to the public internet: none
  #
  zoekt-indexserver-0:
    container_name: zoekt-indexserver-0
    image: 'index.docker.io/sourcegraph/search-indexer:6.6.868@sha256:886f9dede568b239c9095b25c958956c1a86af759227d5c466b89f6c1fc1a2b2'
    cpus: 8
    mem_limit: '16g'
    environment:
      - 'HOSTNAME=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=http://sourcegraph-frontend-internal:3090'
      - 'OPENTELEMETRY_DISABLED=false'
      - 'OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317'
    volumes:
      - 'zoekt-0-shared:/data/index'
    networks:
      - sourcegraph
    restart: always
    hostname: zoekt-indexserver-0

  # Description: Backend for indexed text search operations.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6070/TCP
  # Ports exposed to the public internet: none
  #
  zoekt-webserver-0:
    container_name: zoekt-webserver-0
    image: 'index.docker.io/sourcegraph/indexed-searcher:6.6.868@sha256:ffaa2d841180413dea037311f7c63ec2fad6b7800be840f198bc22e0210689ea'
    cpus: 8
    mem_limit: '50g'
    environment:
      - 'HOSTNAME=zoekt-webserver-0:6070'
      - 'OPENTELEMETRY_DISABLED=false'
      - 'OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:6070/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 3
    volumes:
      - 'zoekt-0-shared:/data/index'
    networks:
      - sourcegraph
    restart: always
    hostname: zoekt-webserver-0

  # Description: Backend for text search operations.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3181/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  searcher-0:
    container_name: searcher-0
    image: 'index.docker.io/sourcegraph/searcher:6.6.868@sha256:e277ad088d2927800460a1dd487fc1597e7622a89c4a1c4e6ffa7e8640ef620d'
    cpus: 2
    mem_limit: '2g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3181/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 3
    volumes:
      - 'searcher-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Handles conversion of uploaded precise code intelligence bundles.
  #
  # Ports exposed to other Sourcegraph services: 3188/TCP
  # Ports exposed to the public internet: none
  #
  precise-code-intel-worker:
    container_name: precise-code-intel-worker
    image: 'index.docker.io/sourcegraph/precise-code-intel-worker:6.6.868@sha256:d4a982f97644a4d882760ea6275f165154d807073e9ab48a879a3857ac7a639e'
    cpus: 2
    mem_limit: '4g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'PRECISE_CODE_INTEL_UPLOAD_BACKEND=blobstore'
      - 'PRECISE_CODE_INTEL_UPLOAD_AWS_ENDPOINT=http://blobstore:9000'
      - 'OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3188/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - sourcegraph
    restart: always

  # Description: Manages background processes.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3189/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  worker:
    container_name: worker
    image: 'index.docker.io/sourcegraph/worker:6.6.868@sha256:4465eaabff9b07d284ac0a5c4cb65e60a786ec760377b6877a3b71df0466e139'
    cpus: 4
    mem_limit: '4g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317'
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'PRECISE_CODE_INTEL_UPLOAD_BACKEND=blobstore'
      - 'PRECISE_CODE_INTEL_UPLOAD_AWS_ENDPOINT=http://blobstore:9000'
    volumes:
      - 'worker:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: High level syntax analysis
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 3188/TCP
  # Ports exposed to the public internet: none
  #
  syntactic-code-intel-worker:
    container_name: syntactic-code-intel-worker
    image: 'index.docker.io/sourcegraph/syntactic-code-intel-worker:6.6.868@sha256:3753c8f94b0fc49a58fbe72c7d2380705ecb337155eb0e2d57c67152cd81a1f0'
    cpus: 2
    mem_limit: '4g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'PRECISE_CODE_INTEL_UPLOAD_BACKEND=blobstore'
      - 'PRECISE_CODE_INTEL_UPLOAD_AWS_ENDPOINT=http://blobstore:9000'
      - 'OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317'
      - 'SYNTACTIC_CODE_INTEL_WORKER_ADDR=:3288'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3288/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 15s
      retries: 3
      start_period: 60s
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for syntax highlighting operations.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 9238/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  syntect-server:
    container_name: syntect-server
    image: 'index.docker.io/sourcegraph/syntax-highlighter:6.6.868@sha256:5fbe566f00bb3481a7728c734f5f099427f06e2c84d213966b182d60013e8120'
    cpus: 4
    mem_limit: '6g'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:9238/health' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - sourcegraph
    restart: always

  # Description: Prometheus collects metrics and aggregates them into graphs.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: none (HTTP 9090 should be exposed to admins only)
  #
  prometheus:
    container_name: prometheus
    image: 'index.docker.io/sourcegraph/prometheus:6.6.868@sha256:8eb1ddcb7fdc282d00953a5df6fb54f2be6c732dc4a5b3369e23b6c317215463'
    cpus: 4
    mem_limit: '8g'
    volumes:
      - 'prometheus-v2:/prometheus'
      - '../prometheus:/sg_prometheus_add_ons'
    ports:
      - '0.0.0.0:9090:9090'
    networks:
      - sourcegraph
    restart: always
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'

  # Description: Dashboards and graphs for Prometheus metrics.
  #
  # Disk: 2GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: none (HTTP 3370 should be exposed to admins only)
  #
  # Add the following environment variables if you wish to use an auth proxy with Grafana:
  #
  # 'GF_AUTH_PROXY_ENABLED=true'
  # 'GF_AUTH_PROXY_HEADER_NAME='X-Forwarded-User'
  # 'GF_SERVER_ROOT_URL='https://grafana.example.com'
  grafana:
    container_name: grafana
    image: 'index.docker.io/sourcegraph/grafana:6.6.868@sha256:0e16a13289a6c311d647cfb7f997fad3793b4112b84b48ff62155775124f677f'
    cpus: 1
    mem_limit: '1g'
    volumes:
      - 'grafana:/var/lib/grafana'
      - '../grafana/datasources:/sg_config_grafana/provisioning/datasources'
      - '../grafana/dashboards:/sg_grafana_additional_dashboards'
    networks:
      - sourcegraph
    restart: always

  # Description: Publishes Prometheus metrics about Docker containers.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 48080/TCP
  # Ports exposed to the public internet: none
  #
  cadvisor:
    container_name: cadvisor
    image: 'index.docker.io/sourcegraph/cadvisor:6.6.868@sha256:cf021fd0d1adf9b0c1973fe88e3aa9b56605bfccb5729b8c676d18725f470d55'
    cpus: 1
    mem_limit: '1g'
    # You may set `privileged` to `false and `cadvisor` will run with reduced privileges.
    # `cadvisor` requires root privileges in order to display provisioning metrics.
    # These metrics provide critical information to help you scale the Sourcegraph deployment.
    # If you would like to bring your own infrastructure monitoring & alerting solution,
    # you may want to remove the `cadvisor` container completely
    privileged: true
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:ro'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
      - '/dev/disk/:/dev/disk:ro'
      # Uncomment to enable container monitoring on MacOS
      # - '/var/run/docker.sock:/var/run/docker.sock:ro'
    devices:
      - '/dev/kmsg'
    networks:
      - sourcegraph
    restart: always
    expose:
      - 48080

  # Description: Publishes Prometheus metrics about the machine's hardware / operating system.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 9100/TCP
  # Ports exposed to the public internet: none
  #
  node-exporter:
    container_name: node-exporter
    image: 'index.docker.io/sourcegraph/node-exporter:6.6.868@sha256:8680e147ce700bf71cbf973d69e65cac1201cb295011206c777355fd8f442522'
    cpus: .5
    mem_limit: '1g'
    pid: 'host'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--no-collector.wifi'
      - '--no-collector.hwmon'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - sourcegraph
    restart: always

  # Description: PostgreSQL database for various data.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 5432/TCP 9187/TCP
  # Ports exposed to the public internet: none
  #
  pgsql:
    container_name: pgsql
    image: 'index.docker.io/sourcegraph/postgresql-16:6.6.868@sha256:4bdcbe01df75f4fb1a26473824fd8b5f32c06d63ab1c3a68ed88087db416ac20'
    cpus: 4
    mem_limit: '4g'
    shm_size: '1g'
    healthcheck:
      test: '/liveness.sh'
      interval: 10s
      timeout: 1s
      retries: 10
      start_period: 1h
    volumes:
      - 'pgsql:/data/'
      - '../pgsql/conf:/conf/'
    networks:
      - sourcegraph
    restart: always
    stop_grace_period: 120s

  # Description: This container will collect and expose prometheus metrics about `pgsql` PostgreSQL server.
  #
  # Disk: None
  # Ports exposed to other Sourcegraph services: 9187/TCP
  # Ports exposed to the public internet: none
  #
  # If you're using a DB instance hosted outside of docker-compose, the environment variables
  # for this container will need to be updated to reflect the new connection information.
  pgsql-exporter:
    container_name: pgsql-exporter
    image: 'index.docker.io/sourcegraph/postgres_exporter:6.6.868@sha256:735a58b2281aaad59c5869cecdb912d55dd52fcabf0da4655331f8eed35879a6'
    cpus: 0.1
    mem_limit: '50m'
    networks:
      - sourcegraph
    restart: always
    environment:
      - 'DATA_SOURCE_NAME=postgres://sg:@pgsql:5432/?sslmode=disable'
      - 'PG_EXPORTER_EXTEND_QUERY_PATH=/config/queries.yaml'

  # Description: PostgreSQL database for code intelligence data.
  #
  # Disk: 128GB / persistent SSD
  # Network: 1Gbps
  # Ports exposed to other Sourcegraph services: 5432/TCP 9187/TCP
  # Ports exposed to the public internet: none
  #
  codeintel-db:
    container_name: codeintel-db
    image: 'index.docker.io/sourcegraph/postgresql-16:6.6.868@sha256:4bdcbe01df75f4fb1a26473824fd8b5f32c06d63ab1c3a68ed88087db416ac20'
    cpus: 4
    mem_limit: '4g'
    shm_size: '1g'
    healthcheck:
      test: '/liveness.sh'
      interval: 10s
      timeout: 1s
      retries: 10
      start_period: 1h
    volumes:
      - 'codeintel-db:/data/'
      - '../codeintel-db/conf:/conf/'
    networks:
      - sourcegraph
    restart: always
    stop_grace_period: 120s

  # Description: This container will collect and expose prometheus metrics about `codeintel-db` PostgreSQL server.
  #
  # Disk: None
  # Ports exposed to other Sourcegraph services: 9187/TCP
  # Ports exposed to the public internet: none
  #
  # If you're using a DB instance hosted outside of docker-compose, the environment variables
  # for this container will need to be updated to reflect the new connection information.
  codeintel-db-exporter:
    container_name: codeintel-db-exporter
    image: 'index.docker.io/sourcegraph/postgres_exporter:6.6.868@sha256:735a58b2281aaad59c5869cecdb912d55dd52fcabf0da4655331f8eed35879a6'
    cpus: 0.1
    mem_limit: '50m'
    networks:
      - sourcegraph
    restart: always
    environment:
      - 'DATA_SOURCE_NAME=postgres://sg:@codeintel-db:5432/?sslmode=disable'
      - 'PG_EXPORTER_EXTEND_QUERY_PATH=/config/code_intel_queries.yaml'

  # Description: PostgreSQL database for code insights data.
  #
  # Disk: 128GB / persistent SSD
  # Network: 1Gbps
  # Ports exposed to other Sourcegraph services: 5432/TCP 9187/TCP
  # Ports exposed to the public internet: none
  #
  codeinsights-db:
    container_name: codeinsights-db
    image: 'index.docker.io/sourcegraph/postgresql-16-codeinsights:6.6.868@sha256:2defa48a52382cb6c57cb626a11c0b9ea0d93599a66c474c8ab3cde7b933be38'
    cpus: 4
    mem_limit: '2g'
    shm_size: '1g'
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: '/liveness.sh'
      interval: 10s
      timeout: 1s
      retries: 10
      start_period: 1h
    volumes:
      - 'codeinsights-db:/var/lib/postgresql/data/'
      - '../codeinsights-db/conf:/conf/'
    networks:
      - sourcegraph
    restart: always
    stop_grace_period: 120s

  # Description: This container will collect and expose prometheus metrics about `codeinsights-db` PostgreSQL server.
  #
  # Disk: None
  # Ports exposed to other Sourcegraph services: 9187/TCP
  # Ports exposed to the public internet: none
  #
  # If you're using a DB instance hosted outside of docker-compose, the environment variables
  # for this container will need to be updated to reflect the new connection information.
  codeinsights-db-exporter:
    container_name: codeinsights-db-exporter
    image: 'index.docker.io/sourcegraph/postgres_exporter:6.6.868@sha256:735a58b2281aaad59c5869cecdb912d55dd52fcabf0da4655331f8eed35879a6'
    cpus: 0.1
    mem_limit: '50m'
    networks:
      - sourcegraph
    restart: always
    environment:
      - 'DATA_SOURCE_NAME=postgres://postgres:password@codeinsights-db:5432/?sslmode=disable'
      - 'PG_EXPORTER_EXTEND_QUERY_PATH=/config/code_insights_queries.yaml'

  # Description: generic S3-like blobstore for storing LSIF uploads.
  #
  # Disk: 128GB / persistent SSD
  # Network: 1Gbps
  # Ports exposed to other Sourcegraph services: 9000/TCP
  # Ports exposed to public internet: none
  #
  blobstore:
    container_name: blobstore
    image: 'index.docker.io/sourcegraph/blobstore:6.6.868@sha256:a6ef641206dbbc665852d86415a0c7aa71ee74e5dde337e02867369d7b6ac507'
    cpus: 1
    mem_limit: '1g'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://127.0.0.1:9000/']
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 15s
    volumes:
      - 'blobstore:/data'
    networks:
      - sourcegraph
    restart: always

  # Description: Redis for storing short-lived caches.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6379/TCP 9121/TCP
  # Ports exposed to the public internet: none
  #
  redis-cache:
    container_name: redis-cache
    image: 'index.docker.io/sourcegraph/redis-cache:6.6.868@sha256:8d6b5a2ccb7fae762a8eb33b88d59c85ab89002651b6387946d80381ab9a698b'
    cpus: 1
    mem_limit: '7g'
    volumes:
      - 'redis-cache:/redis-data'
    networks:
      - sourcegraph
    restart: always
  # Description: Redis for storing semi-persistent data like user sessions.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6379/TCP 9121/TCP
  # Ports exposed to the public internet: none
  #
  redis-store:
    container_name: redis-store
    image: 'index.docker.io/sourcegraph/redis-store:6.6.868@sha256:4cc78c9fb5baa8f6e123b114c5d8da4fa233d4fdac12d1e77f83751e58404ddc'
    cpus: 1
    mem_limit: '7g'
    volumes:
      - 'redis-store:/redis-data'
    networks:
      - sourcegraph
    restart: always

  # Description: Ingests and exports OpenTelemetry data.
  #
  # Ports exposed to other Sourcegraph services: 4317 (receiver), 55679 (zpages)
  # Ports exposed to the public internet: none
  otel-collector:
    container_name: otel-collector
    image: 'index.docker.io/sourcegraph/opentelemetry-collector:6.6.868@sha256:d88a20329ddb85a8b4f25a63b81b89d2af1f74067c1cf74f196786971e06bcd7'
    cpus: 1
    mem_limit: '1g'
    networks:
      - sourcegraph
    restart: always
    # Default configurations are shipped in '/etc/otel-collector/configs/'
    command: ['--config', '/etc/otel-collector/configs/logging.yaml']
    volumes:
      - '../otel-collector/config.yaml:/etc/otel-collector/config.yaml'

volumes:
  caddy:
  gitserver-0:
  grafana:
  pgsql:
  codeintel-db:
  codeinsights-db:
  blobstore:
  prometheus-v2:
  redis-cache:
  redis-store:
  worker:
  searcher-0:
  sourcegraph-frontend-0:
  sourcegraph-frontend-internal-0:
  zoekt-0-shared:
networks:
  sourcegraph:
