version: '2.4'
services:
  # Description: Acts as a reverse proxy for all of the sourcegraph-frontend instances
  #
  # Disk: 1GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: 80 (HTTP) and 443 (HTTPS)
  #
  # Sourcegraph ships with a few builtin templates that cover common HTTP/HTTPS configurations:
  # - HTTP only (default)
  # - HTTPS with Let's Encrypt
  # - HTTPS with custom certificates
  #
  # Follow the directions in the comments below to swap between these configurations.
  #
  # If none of these built-in configurations suit your needs, then you can create your own Caddyfile, see:
  # https://caddyserver.com/docs/caddyfile
  caddy:
    container_name: caddy
    image: 'index.docker.io/caddy/caddy:alpine@sha256:ef2f47730caa12cb7d0ba944c048b8e48f029d5e0ff861840fa2b8f1868e1966'
    cpus: 4
    mem_limit: '4g'
    environment:
      - 'XDG_DATA_HOME=/caddy-storage/data'
      - 'XDG_CONFIG_HOME=/caddy-storage/config'
      - 'SRC_FRONTEND_ADDRESSES=sourcegraph-frontend-0:3080'
      # Uncomment & update this line when using Let's Encrypt or custom HTTPS certificates:
      # - 'SRC_SITE_ADDRESS=sourcegraph.example.com'
      #
      # Uncomment & update the following line when using HTTPS with Let's Encrypt
      # - 'SRC_ACME_EMAIL=admin@example.com'
    volumes:
      - 'caddy:/caddy-storage'
      #
      # Comment out the following line when using HTTPS with either Let's Encrypt or custom certficates
      - '../caddy/builtins/http.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with Let's Encrypt's staging environment
      # - '../caddy/builtins/https.lets-encrypt-staging.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with Let's Encrypt's production environment
      # IMPORTANT: Strongly recommended to test with the staging configuration above first, see that file for details.
      # - '../caddy/builtins/https.lets-encrypt-prod.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with custom certificates
      # - '../caddy/builtins/https.custom-cert.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment / update the following line when using HTTPS with custom certficates
      # - '/LOCAL/CERT/PATH.pem:/sourcegraph.pem'
      #
      # Uncomment / update the following line when using HTTPS with custom certficates
      # - '/LOCAL/KEY/PATH.key:/sourcegraph.key'
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'
    networks:
      - sourcegraph
    restart: always

  # Description: Serves the frontend of Sourcegraph via HTTP(S).
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 6060/TCP, 3080 (HTTP), and/or 3443 (HTTPS)
  # Ports exposed to the public internet: none
  #
  # Note: SRC_GIT_SERVERS, SEARCHER_URL, and SYMBOLS_URL are space-separated
  # lists which each allow you to specify more container instances for scaling
  # purposes. Be sure to also apply such a change here to the frontend-internal
  # service.
  sourcegraph-frontend-0:
    container_name: sourcegraph-frontend-0
    image: 'index.docker.io/sourcegraph/frontend:3.26.1@sha256:77e5da2ba6cc19a90a8b6e1d99b72c493fcbb03f08c50ed07de20454dbf1d456'
    cpus: 4
    mem_limit: '8g'
    environment:
      - DEPLOY_TYPE=docker-compose
      - GOMAXPROCS=12
      - JAEGER_AGENT_HOST=jaeger
      - PGHOST=pgsql
      - CODEINTEL_PGHOST=codeintel-db
      - CODEINSIGHTS_PGDATASOURCE=postgres://postgres:password@codeinsights-db:5432/postgres
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SRC_SYNTECT_SERVER=http://syntect-server:9238'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'SYMBOLS_URL=http://symbols-0:3184'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'REPO_UPDATER_URL=http://repo-updater:3182'
      - 'GRAFANA_SERVER_URL=http://grafana:3370'
      - 'JAEGER_SERVER_URL=http://jaeger:16686'
      - 'GITHUB_BASE_URL=http://github-proxy:3180'
      - 'PROMETHEUS_URL=http://prometheus:9090'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3080/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 300s
    volumes:
      - 'sourcegraph-frontend-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always
    depends_on:
      sourcegraph-frontend-internal:
        condition: service_healthy

  # Description: Serves the internal Sourcegraph frontend API.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3090/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  sourcegraph-frontend-internal:
    container_name: sourcegraph-frontend-internal
    image: 'index.docker.io/sourcegraph/frontend:3.26.1@sha256:77e5da2ba6cc19a90a8b6e1d99b72c493fcbb03f08c50ed07de20454dbf1d456'
    cpus: 4
    mem_limit: '8g'
    environment:
      - DEPLOY_TYPE=docker-compose
      - GOMAXPROCS=4
      - PGHOST=pgsql
      - CODEINTEL_PGHOST=codeintel-db
      - CODEINSIGHTS_PGDATASOURCE=postgres://postgres:password@codeinsights-db:5432/postgres
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SRC_SYNTECT_SERVER=http://syntect-server:9238'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'SYMBOLS_URL=http://symbols-0:3184'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'REPO_UPDATER_URL=http://repo-updater:3182'
      - 'GRAFANA_SERVER_URL=http://grafana:3000'
      - 'JAEGER_SERVER_URL=http://jaeger:16686'
      - 'GITHUB_BASE_URL=http://github-proxy:3180'
      - 'PROMETHEUS_URL=http://prometheus:9090'
    volumes:
      - 'sourcegraph-frontend-internal-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3080/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 300s

  # Description: Stores clones of repositories to perform Git operations.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 3178/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  gitserver-0:
    container_name: gitserver-0
    image: 'index.docker.io/sourcegraph/gitserver:3.26.1@sha256:a27ab3c9fbc5b979d916c3d312f1ecbe4f6375314eb28845ddf164473e069f61'
    cpus: 4
    mem_limit: '8g'
    environment:
      - GOMAXPROCS=4
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
    volumes:
      - 'gitserver-0:/data/repos'
    networks:
      - sourcegraph
    restart: always
    hostname: gitserver-0

  # Description: Backend for indexed text search operations.
  #
  # Disk: 200GB / persistent SSD
  # Network: 100mbps
  # Liveness probe: n/a
  # Ports exposed to other Sourcegraph services: 6072/TCP
  # Ports exposed to the public internet: none
  #
  zoekt-indexserver-0:
    container_name: zoekt-indexserver-0
    image: 'index.docker.io/sourcegraph/search-indexer:3.26.1@sha256:42081daa7d205bb610d3cf2d561e2e9899459aeded363e4efec13026ad264c5c'
    mem_limit: '16g'
    environment:
      - GOMAXPROCS=8
      - 'HOSTNAME=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=http://sourcegraph-frontend-internal:3090'
    volumes:
      - 'zoekt-0-shared:/data/index'
    networks:
      - sourcegraph
    restart: always
    hostname: zoekt-indexserver-0
  # Description: Backend for indexed text search operations.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6070/TCP
  # Ports exposed to the public internet: none
  #
  zoekt-webserver-0:
    container_name: zoekt-webserver-0
    image: 'index.docker.io/sourcegraph/indexed-searcher:3.26.1@sha256:7cd80afcb50f015d6a9de5fb98ad08d3c5e6225f6e32f6f4ee6d4d81634d56aa'
    cpus: 8
    mem_limit: '50g'
    environment:
      - GOMAXPROCS=8
      - 'HOSTNAME=zoekt-webserver-0:6070'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:6070/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 3
    volumes:
      - 'zoekt-0-shared:/data/index'
    networks:
      - sourcegraph
    restart: always
    hostname: zoekt-webserver-0

  # Description: Backend for text search operations.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3181/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  searcher-0:
    container_name: searcher-0
    image: 'index.docker.io/sourcegraph/searcher:3.26.1@sha256:0dada6843e49c2e874fcf4a8e6bff0008f7975e5aa32e1c302278b93401cfcb4'
    cpus: 2
    mem_limit: '2g'
    environment:
      - GOMAXPROCS=2
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3181/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 3
    volumes:
      - 'searcher-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Rate-limiting proxy for the GitHub API.
  #
  # CPU: 1
  # Memory: 1GB
  # Disk: 1GB / non-persistent SSD (only for read-only config file)
  # Ports exposed to other Sourcegraph services: 3180/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  github-proxy:
    container_name: github-proxy
    image: 'index.docker.io/sourcegraph/github-proxy:3.26.1@sha256:6cbe12d9e82f056b6845c93aa67b775143d719d913bd8725d9ca92aad26a031c'
    cpus: 1
    mem_limit: '1g'
    environment:
      - GOMAXPROCS=1
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
    networks:
      - sourcegraph
    restart: always

  # Description: Handles conversion of uploaded precise code intelligence bundles.
  #
  # Ports exposed to other Sourcegraph services: 3188/TCP
  # Ports exposed to the public internet: none
  #
  precise-code-intel-worker:
    container_name: precise-code-intel-worker
    image: 'index.docker.io/sourcegraph/precise-code-intel-worker:3.26.1@sha256:907be1eef0a2caaf1bccd04356e72d1648a8fe9119167698ed31fbafc8b6f19e'
    cpus: 2
    mem_limit: '4g'
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3188/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - sourcegraph
    restart: always

  # Description: Saved search query runner / notification service.
  #
  # Disk: 1GB / non-persistent SSD (only for read-only config file)
  # Network: 100mbps
  # Liveness probe: n/a
  # Ports exposed to other Sourcegraph services: 3183/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  query-runner:
    container_name: query-runner
    image: 'index.docker.io/sourcegraph/query-runner:3.26.1@sha256:039fa11910efe0fd233d446c2726c6dc4e6ce9b60ac2b54156e0678ea608014e'
    cpus: 1
    mem_limit: '1g'
    environment:
      - GOMAXPROCS=1
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
    networks:
      - sourcegraph
    restart: always

  # Description: Handles repository metadata (not Git data) lookups and updates from external code hosts and other similar services.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3182/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  repo-updater:
    container_name: repo-updater
    image: 'index.docker.io/sourcegraph/repo-updater:3.26.1@sha256:4854356eeb511dc5049b444ce90f65fd94192dbae2d85a3022718ecea613a567'
    cpus: 4
    mem_limit: '4g'
    environment:
      - GOMAXPROCS=1
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
      - 'GITHUB_BASE_URL=http://github-proxy:3180'
    volumes:
      - 'repo-updater:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for syntax highlighting operations.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 9238/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  syntect-server:
    container_name: syntect-server
    image: 'index.docker.io/sourcegraph/syntax-highlighter:3.26.1@sha256:6b8950b41993af3d10300b5a160fab1c06c337cb4614978f4fdb76e2588afbfe'
    cpus: 4
    mem_limit: '6g'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:9238/health' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for symbols operations.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3184/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  symbols-0:
    container_name: symbols-0
    image: 'index.docker.io/sourcegraph/symbols:3.26.1@sha256:b509ae67610d1f6d3efcf9f3c7a01c7b5418ff2c5a45b427f84c06c5571e8773'
    cpus: 2
    mem_limit: '4g'
    environment:
      - GOMAXPROCS=2
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3184/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 60s
    volumes:
      - 'symbols-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Prometheus collects metrics and aggregates them into graphs.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: none (HTTP 9090 should be exposed to admins only)
  #
  prometheus:
    container_name: prometheus
    image: 'index.docker.io/sourcegraph/prometheus:3.26.1@sha256:fb573ef8d1c52b0c9a2d0b2d190b976832c68ab8dbfe3aea62ef1580c9e802c2'
    cpus: 4
    mem_limit: '8g'
    volumes:
      - 'prometheus-v2:/prometheus'
      - '../prometheus:/sg_prometheus_add_ons'
    ports:
      - '0.0.0.0:9090:9090'
    networks:
      - sourcegraph
    restart: always
    environment:
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'

  # Description: Dashboards and graphs for Prometheus metrics.
  #
  # Disk: 2GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: none (HTTP 3370 should be exposed to admins only)
  #
  # Add the following environment variables if you wish to use an auth proxy with Grafana:
  #
  # 'GF_AUTH_PROXY_ENABLED=true'
  # 'GF_AUTH_PROXY_HEADER_NAME='X-Forwarded-User'
  # 'GF_SERVER_ROOT_URL='https://grafana.example.com'
  grafana:
    container_name: grafana
    image: 'index.docker.io/sourcegraph/grafana:3.26.1@sha256:6ef285630fec074ea21250ad1b50bc7f615c93c3994ac98a381b79b536cc4de6'
    cpus: 1
    mem_limit: '1g'
    volumes:
      - 'grafana:/var/lib/grafana'
      - '../grafana/datasources:/sg_config_grafana/provisioning/datasources'
      - '../grafana/dashboards:/sg_grafana_additional_dashboards'
    ports:
      - '0.0.0.0:3370:3370'
    networks:
      - sourcegraph
    restart: always

  # Description: Publishes Prometheus metrics about Docker containers.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 8080/TCP
  # Ports exposed to the public internet: none
  #
  cadvisor:
    container_name: cadvisor
    image: 'index.docker.io/sourcegraph/cadvisor:3.26.1@sha256:564c2fa067e46833c9fc1661f03e3996ad2c5da874c7e32030125abc53990b9e'
    cpus: 1
    mem_limit: '1g'
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:ro'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
      - '/dev/disk/:/dev/disk:ro'
      # Uncomment to enable container monitoring on MacOS
      # - '/var/run/docker.sock:/var/run/docker.sock:ro'
    networks:
      - sourcegraph
    restart: always
    command:
      - --port=8080

  # Description: Jaeger all-in-one instance
  # (https://www.jaegertracing.io/docs/1.17/getting-started/#all-in-one) for distributed tracing.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 5778/TCP 6831/UDP 6832/UDP 14250/TCP
  # Ports exposed to the public internet: none
  # Ports exposed to site admins only: 16686/HTTP
  #
  jaeger:
    container_name: jaeger
    image: 'index.docker.io/sourcegraph/jaeger-all-in-one:3.26.1@sha256:f899dca0640cd7fb78032d83bb75c3097d4d04f62b00d8902a1a31a456aebb43'
    cpus: 0.5
    mem_limit: '512m'
    ports:
      # Query port
      - '0.0.0.0:16686:16686'
      # Collector port
      - '0.0.0.0:14250:14250'
      # Agent ports
      - '0.0.0.0:5778:5778'
      - '0.0.0.0:6831:6831'
      - '0.0.0.0:6832:6832'
    networks:
      - sourcegraph
    restart: always
    command: ['--memory.max-traces=20000']

  # Description: PostgreSQL database for various data.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 5432/TCP 9187/TCP
  # Ports exposed to the public internet: none
  #
  pgsql:
    container_name: pgsql
    image: 'index.docker.io/sourcegraph/postgres-11.4:3.26.1@sha256:a55fea6638d478c2368c227d06a1a2b7a2056b693967628427d41c92d9209e97'
    cpus: 4
    mem_limit: '2g'
    healthcheck:
      test: '/liveness.sh'
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 15s
    volumes:
      - 'pgsql:/data/'
    networks:
      - sourcegraph
    restart: always

  # Description: PostgreSQL database for code intelligence data.
  #
  # Disk: 128GB / persistent SSD
  # Network: 1Gbps
  # Ports exposed to other Sourcegraph services: 5432/TCP 9187/TCP
  # Ports exposed to the public internet: none
  #
  codeintel-db:
    container_name: codeintel-db
    image: 'index.docker.io/sourcegraph/codeintel-db:3.26.1@sha256:a55fea6638d478c2368c227d06a1a2b7a2056b693967628427d41c92d9209e97'
    cpus: 4
    mem_limit: '2g'
    healthcheck:
      test: '/liveness.sh'
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 15s
    volumes:
      - 'codeintel-db:/data/'
    networks:
      - sourcegraph
    restart: always

  # Description: TimescaleDB time-series database for code insights data.
  #
  # Disk: 128GB / persistent SSD
  # Network: 1Gbps
  # Ports exposed to other Sourcegraph services: 5432/TCP 9187/TCP
  # Ports exposed to the public internet: none
  #
  # Note: You should deploy this as a container, do not try to connect it to your external
  # Postgres deployment (TimescaleDB is a bit special and most hosted Postgres deployments
  # do not support TimescaleDB, the data here is akin to gitserver's data, where losing it
  # would be bad but it can be rebuilt given enough time.)
  codeinsights-db:
    container_name: codeinsights-db
    image: "index.docker.io/sourcegraph/codeinsights-db:3.26.1@sha256:f985af2fef860cc48be40ded864df025b8794b02b86e66cbc6c55bfe3c418831"
    cpus: 4
    mem_limit: "2g"
    environment:
      - POSTGRES_PASSWORD=password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - "codeinsights-db:/var/lib/postgresql/data/"
    networks:
      - sourcegraph
    restart: always

  # Description: MinIO for storing LSIF uploads.
  #
  # Disk: 128GB / persistent SSD
  # Network: 1Gbps
  # Ports exposed to other Sourcegraph services: 9000/TCP
  # Ports exposed to public internet: none
  #
  minio:
    container_name: minio
    image: 'index.docker.io/sourcegraph/minio:3.26.1@sha256:3d7a0147396ea799284ba707765d477797518425682c9aa65faa5883a63fac4f'
    cpus: 1
    mem_limit: '1g'
    environment:
      - 'MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE'
      - 'MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://127.0.0.1:9000/minio/health/live']
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 15s
    volumes:
      - 'minio:/data'
    networks:
      - sourcegraph
    restart: always
    command: ['server', '/data']

  # Description: Redis for storing short-lived caches.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6379/TCP 9121/TCP
  # Ports exposed to the public internet: none
  #
  redis-cache:
    container_name: redis-cache
    image: 'index.docker.io/sourcegraph/redis-cache:3.26.1@sha256:7820219195ab3e8fdae5875cd690fed1b2a01fd1063bd94210c0e9d529c38e56'
    cpus: 1
    mem_limit: '6g'
    volumes:
      - 'redis-cache:/redis-data'
    networks:
      - sourcegraph
    restart: always
  # Description: Redis for storing semi-persistent data like user sessions.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6379/TCP 9121/TCP
  # Ports exposed to the public internet: none
  #
  redis-store:
    container_name: redis-store
    image: 'index.docker.io/sourcegraph/redis-store:3.26.1@sha256:e8467a8279832207559bdfbc4a89b68916ecd5b44ab5cf7620c995461c005168'
    cpus: 1
    mem_limit: '6g'
    volumes:
      - 'redis-store:/redis-data'
    networks:
      - sourcegraph
    restart: always

volumes:
  caddy:
  gitserver-0:
  grafana:
  pgsql:
  codeintel-db:
  codeinsights-db:
  minio:
  prometheus-v2:
  redis-cache:
  redis-store:
  repo-updater:
  searcher-0:
  sourcegraph-frontend-0:
  sourcegraph-frontend-internal-0:
  symbols-0:
  zoekt-0-shared:
networks:
  sourcegraph:
