version: '2.4'
services:
  # Description: Acts as a reverse proxy for all of the sourcegraph-frontend instances
  #
  # Disk: 1GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: 80 (HTTP) and 443 (HTTPS)
  #
  # Sourcegraph ships with a few builtin templates that cover common HTTP/HTTPS configurations:
  # - HTTP only (default)
  # - HTTPS with Let's Encrypt
  # - HTTPS with custom certificates
  #
  # Follow the directions in the comments below to swap between these configurations.
  #
  # If none of these built-in configurations suit your needs, then you can create your own Caddyfile, see:
  # https://caddyserver.com/docs/caddyfile
  caddy:
    container_name: caddy
    image: 'index.docker.io/caddy/caddy:alpine@sha256:b0f0a763527ca11a555bc5b5f942fa2d84ae0c90b0b60e47d0426ff884dd10ad'
    cpus: 4
    mem_limit: '4g'
    environment:
      - 'XDG_DATA_HOME=/caddy-storage/data'
      - 'XDG_CONFIG_HOME=/caddy-storage/config'
      - 'SRC_FRONTEND_ADDRESSES="sourcegraph-frontend-0:3080"'
      # Uncomment & update this line when using Let's Encrypt or custom HTTPS certificates:
      # - 'SRC_SITE_ADDRESS="sourcegraph.example.com"'
      #
      # Uncomment & update the following line when using HTTPS with Let's Encrypt
      # - 'SRC_ACME_EMAIL=admin@example.com'
    volumes:
      - 'caddy:/caddy-storage'
      #
      # Comment out the following line when using HTTPS with either Let's Encrypt or custom certficates
      - '../caddy/builtins/http.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with Let's Encrypt's staging environment
      # - '../caddy/builtins/https.lets-encrypt-staging.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with Let's Encrypt's production environment
      # IMPORTANT: Strongly recommended to test with the staging configuration above first, see that file for details. 
      # - '../caddy/builtins/https.lets-encrypt-prod.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment the following line when using HTTPS with custom certificates
      # - '../caddy/builtins/https.custom-cert.Caddyfile:/etc/caddy/Caddyfile'
      #
      # Uncomment / update the following line when using HTTPS with custom certficates
      # - '/LOCAL/CERT/PATH.pem:/sourcegraph.pem'
      #
      # Uncomment / update the following line when using HTTPS with custom certficates
      # - '/LOCAL/KEY/PATH.pem:/sourcegraph.key'
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'
    networks:
      - sourcegraph
    restart: always

  # Description: Serves the frontend of Sourcegraph via HTTP(S).
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 6060/TCP, 3080 (HTTP), and/or 3443 (HTTPS)
  # Ports exposed to the public internet: none
  #
  # Note: SRC_GIT_SERVERS, SEARCHER_URL, and SYMBOLS_URL are space-separated
  # lists which each allow you to specify more container instances for scaling
  # purposes. Be sure to also apply such a change here to the frontend-internal
  # service.
  sourcegraph-frontend-0:
    container_name: sourcegraph-frontend-0
    image: 'index.docker.io/sourcegraph/frontend:3.13.1@sha256:d03bada46d4885febf113efb1056aca6cc5899b97abfa92c6f39446247ca14a0'
    cpus: 4
    mem_limit: '8g'
    environment:
      - GOMAXPROCS=12
      - JAEGER_AGENT_HOST=jaeger-agent
      - PGHOST=pgsql
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SRC_SYNTECT_SERVER=http://syntect-server:9238'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'SYMBOLS_URL=http://symbols-0:3184'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'REPO_UPDATER_URL=http://repo-updater:3182'
      - 'REPLACER_URL=http://replacer:3185'
      - 'LSIF_SERVER_URL=http://lsif-server:3186'
      - 'GRAFANA_SERVER_URL=http://grafana:3370'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3080/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 300s
    volumes:
      - 'sourcegraph-frontend-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Serves the internal Sourcegraph frontend API.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3090/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  sourcegraph-frontend-internal:
    container_name: sourcegraph-frontend-internal
    image: 'index.docker.io/sourcegraph/frontend:3.13.1@sha256:d03bada46d4885febf113efb1056aca6cc5899b97abfa92c6f39446247ca14a0'
    cpus: 4
    mem_limit: '8g'
    environment:
      - GOMAXPROCS=4
      - PGHOST=pgsql
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SRC_SYNTECT_SERVER=http://syntect-server:9238'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'SYMBOLS_URL=http://symbols-0:3184'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'REPO_UPDATER_URL=http://repo-updater:3182'
      - 'REPLACER_URL=http://replacer:3185'
      - 'LSIF_SERVER_URL=http://lsif-server:3186'
      - 'GRAFANA_SERVER_URL=http://grafana:3000'
    volumes:
      - 'sourcegraph-frontend-internal-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Stores clones of repositories to perform Git operations.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 3178/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  gitserver-0:
    container_name: gitserver-0
    image: 'index.docker.io/sourcegraph/gitserver:3.13.1@sha256:de44da255e6aa8d7771b4e91f64d6be996289e9436fdd5b7809582366826b43e'
    cpus: 4
    mem_limit: '8g'
    environment:
      - GOMAXPROCS=4
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
    volumes:
      - 'gitserver-0:/data/repos'
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for indexed text search operations.
  #
  # Disk: 200GB / persistent SSD
  # Network: 100mbps
  # Liveness probe: n/a
  # Ports exposed to other Sourcegraph services: 6072/TCP
  # Ports exposed to the public internet: none
  #
  zoekt-indexserver-0:
    container_name: zoekt-indexserver-0
    image: 'index.docker.io/sourcegraph/zoekt-indexserver:0.0.20200302121716-13dbd22@sha256:91643d83223bb72f4aa2b5031ceb774c8e604a227c58ed54375bd341f25e2ef3'
    mem_limit: '16g'
    environment:
      - GOMAXPROCS=8
      - 'HOSTNAME=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=http://sourcegraph-frontend-internal:3090'
    volumes:
      - 'zoekt-0-shared:/data/index'
    networks:
      - sourcegraph
    restart: always
    hostname: zoekt-indexserver-0
  # Description: Backend for indexed text search operations.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6070/TCP
  # Ports exposed to the public internet: none
  #
  zoekt-webserver-0:
    container_name: zoekt-webserver-0
    image: 'index.docker.io/sourcegraph/zoekt-webserver:0.0.20200302121635-13dbd22@sha256:0183bd676fe1ba774edcca29f042d8d3594e833e08b6d603af98f74c575eaf69'
    cpus: 8
    mem_limit: '50g'
    environment:
      - GOMAXPROCS=8
      - 'HOSTNAME=zoekt-webserver-0:6070'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:6070/healthz' -O /dev/null || exit 1"
      interval: 1s
      timeout: 10s
      retries: 1
    volumes:
      - 'zoekt-0-shared:/data/index'
    networks:
      - sourcegraph
    restart: always
    hostname: zoekt-webserver-0

  # Description: Backend for text search operations.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3181/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  searcher-0:
    container_name: searcher-0
    image: 'index.docker.io/sourcegraph/searcher:3.13.1@sha256:086b4404b9cbb0e0cdafa9359e8f88de4ee0f99ce8231776e40e375fe0d9eba4'
    cpus: 2
    mem_limit: '2g'
    environment:
      - GOMAXPROCS=2
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3181/healthz' -O /dev/null || exit 1"
      interval: 1s
      timeout: 10s
      retries: 1
    volumes:
      - 'searcher-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Rate-limiting proxy for the GitHub API.
  #
  # CPU: 1
  # Memory: 1GB
  # Disk: 1GB / non-persistent SSD (only for read-only config file)
  # Ports exposed to other Sourcegraph services: 3180/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  github-proxy:
    container_name: github-proxy
    image: 'index.docker.io/sourcegraph/github-proxy:3.13.1@sha256:5ae601bdb681dca2f9481021400c41fc5d0c05f89f2f083c04669ad4174a485f'
    cpus: 1
    mem_limit: '1g'
    environment:
      - GOMAXPROCS=1
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
    networks:
      - sourcegraph
    restart: always

  # Description: LSIF HTTP server for code intelligence.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 3186/TCP (server) 3187/TCP (worker)
  # Ports exposed to the public internet: none
  #
  lsif-server:
    container_name: lsif-server
    image: 'index.docker.io/sourcegraph/lsif-server:3.13.1@sha256:5da2ce470450294d155bd1edc86b37296faef81565ec226795261a7dc8fd5682'
    cpus: 2
    mem_limit: '2g'
    environment:
      - GOMAXPROCS=2
      - LSIF_STORAGE_ROOT=/lsif-storage
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3186/ping' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 1
      start_period: 60s
    volumes:
      - 'lsif-server:/lsif-storage'
    networks:
      - sourcegraph
    restart: always

  # Description: Saved search query runner / notification service.
  #
  # Disk: 1GB / non-persistent SSD (only for read-only config file)
  # Network: 100mbps
  # Liveness probe: n/a
  # Ports exposed to other Sourcegraph services: 3183/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  query-runner:
    container_name: query-runner
    image: 'index.docker.io/sourcegraph/query-runner:3.13.1@sha256:af666c0b7a6110a74b89337e57a7d175da81424cbb2e5ff9950e7d6968fca308'
    cpus: 1
    mem_limit: '1g'
    environment:
      - GOMAXPROCS=1
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for replace operations.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3185/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  replacer:
    container_name: replacer
    image: 'index.docker.io/sourcegraph/replacer:3.13.1@sha256:082472b9c5974deb38b5c540711c58066cfe903a4e079a4e90ceb79ba44fcf62'
    cpus: 1
    mem_limit: '512m'
    environment:
      - GOMAXPROCS=1
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3185/healthz' -O /dev/null || exit 1"
      interval: 1s
      timeout: 10s
      retries: 1
    volumes:
      - 'replacer:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Handles repository metadata (not Git data) lookups and updates from external code hosts and other similar services.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3182/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  repo-updater:
    container_name: repo-updater
    image: 'index.docker.io/sourcegraph/repo-updater:3.13.1@sha256:f619d8ebdfb3c166d1f99543c562ebe700886f0f42f55385fa244622683458d5'
    cpus: 4
    mem_limit: '4g'
    environment:
      - GOMAXPROCS=1
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
      - 'GITHUB_BASE_URL=http://github-proxy:3180'
    volumes:
      - 'repo-updater:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for syntax highlighting operations.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 9238/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  syntect-server:
    container_name: syntect-server
    image: 'index.docker.io/sourcegraph/syntect_server:c0297a1@sha256:333abb45cfaae9c9d37e576c3853843b00eca33a40a7c71f6b93211ed96528df'
    cpus: 4
    mem_limit: '6g'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:9238/health' -O /dev/null || exit 1"
      interval: 1s
      timeout: 5s
      retries: 1
      start_period: 5s
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for symbols operations.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3184/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  symbols-0:
    container_name: symbols-0
    image: 'index.docker.io/sourcegraph/symbols:3.13.1@sha256:0b1eaf60ffe75182f3c097125b02c291626de18cc5bfddae167189573814ed88'
    cpus: 2
    mem_limit: '4g'
    environment:
      - GOMAXPROCS=2
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3184/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 1
      start_period: 60s
    volumes:
      - 'symbols-0:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Prometheus collects metrics and aggregates them into graphs.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: none (HTTP 9090 should be exposed to admins only)
  #
  prometheus:
    container_name: prometheus
    image: 'index.docker.io/sourcegraph/prometheus:10.0.7@sha256:22d54f27c7df8733a06c7ae8c2e851b61b1ed42f1f5621d493ef58ebd8d815e0'
    cpus: 4
    mem_limit: '8g'
    volumes:
      - 'prometheus-v2:/prometheus'
      - '../prometheus:/sg_prometheus_add_ons'
    ports:
      - '0.0.0.0:9090:9090'
    networks:
      - sourcegraph
    restart: always

  # Description: Dashboards and graphs for Prometheus metrics.
  #
  # Disk: 100GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: none (HTTP 3000 should be exposed to admins only)
  #
  # Add the following environment variables if you wish to use an auth proxy with Grafana:
  #
  # 'GF_AUTH_PROXY_ENABLED=true'
  # 'GF_AUTH_PROXY_HEADER_NAME='X-Forwarded-User'
  # 'GF_SERVER_ROOT_URL='https://grafana.example.com'
  grafana:
    container_name: grafana
    image: 'index.docker.io/sourcegraph/grafana:10.0.10@sha256:a6f9816346c3e38478f4b855eeee199fc91a4f69311f5dd57760bf74c3234715'
    cpus: 1
    mem_limit: '1g'
    volumes:
      - 'grafana:/var/lib/grafana'
      - '../grafana/datasources:/sg_config_grafana/provisioning/datasources'
      - '../grafana/dashboards:/sg_grafana_additional_dashboards'
    ports:
      - '0.0.0.0:3370:3370'
    networks:
      - sourcegraph
    restart: always

  # Description: Publishes Prometheus metrics about Docker containers.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 8080/TCP
  # Ports exposed to the public internet: none
  #
  cadvisor:
    container_name: cadvisor
    image: 'google/cadvisor:v0.33.0'
    cpus: 1
    mem_limit: '1g'
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:ro'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
      - '/dev/disk/:/dev/disk:ro'
    networks:
      - sourcegraph
    restart: always

  # # Description: Jaeger agent which is local to the host machine (containers on
  # # the machine send trace information to it and it relays to the collector).
  # #
  # # Disk: none
  # # Ports exposed to other Sourcegraph services: 5775/UDP 6831/UDP 6832/UDP (on the same host machine)
  # # Ports exposed to the public internet: none
  # #
  # jaeger-agent:
  #   container_name: jaeger-agent
  #   image: 'index.docker.io/jaegertracing/jaeger-agent@sha256:7ad33c19fd66307f2a3c07c95eb07c335ddce1b487f6b6128faa75d042c496cb'
  #   cpus: 1
  #   mem_limit: '1g'
  #   environment:
  #     - "COLLECTOR_HOST_PORT='jaeger-collector:14267'"
  #   networks:
  #     - sourcegraph
  #   restart: always

  # # Description: Jaeger's Cassandra database for storing traces.
  # #
  # # Disk: 128GB / persistent SSD
  # # Ports exposed to other Sourcegraph services: 9042/TCP
  # # Ports exposed to the public internet: none
  # #
  # jaeger-cassandra:
  #   container_name: jaeger-cassandra
  #   image: 'index.docker.io/library/cassandra:3.11.4@sha256:9f1d47fd23261c49f226546fe0134e6d4ad0570b7ea3a169c521005cb8369a32'
  #   cpus: 4
  #   mem_limit: '8g'
  #   environment:
  #     - 'HEAP_NEWSIZE=1G'
  #     - 'MAX_HEAP_SIZE=6G'
  #     - 'CASSANDRA_DC=sourcegraph'
  #     - 'CASSANDRA_RACK=rack1'
  #     - 'CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch'
  #   volumes:
  #     - 'jaeger-cassandra:/var/lib/cassandra'
  #   networks:
  #     - sourcegraph
  #   restart: always

  # # Description: Receives traces from Jaeger agents.
  # #
  # # Disk: none
  # # Ports exposed to other Sourcegraph services: 14267/TCP
  # # Ports exposed to the public internet: none
  # #
  # jaeger-collector:
  #   container_name: jaeger-collector
  #   image: 'index.docker.io/jaegertracing/jaeger-collector:1.11@sha256:0b6d28bb52410f7b50c0f0fc16d7ee391e2e3eca47b713ac88d0891ca8a63cb9'
  #   cpus: 1
  #   mem_limit: '1g'
  #   environment:
  #     - SPAN_STORAGE_TYPE=cassandra
  #     - CASSANDRA_SERVERS=jaeger-cassandra
  #     - CASSANDRA_KEYSPACE=jaeger_v1_sourcegraph
  #   networks:
  #     - sourcegraph
  #   restart: always

  # # Description: Jaeger frontend for querying traces.
  # #
  # # Disk: none
  # # Ports exposed to other Sourcegraph services: none
  # # Ports exposed to the public internet: none (HTTP 16686 should be exposed to admins only)
  # #
  # jaeger-query:
  #   container_name: jaeger-query
  #   image: 'index.docker.io/jaegertracing/jaeger-query:1.11@sha256:cddc521d0166c868931282685a863368ae2c14c4de0c1be38e388ece3080439e'
  #   cpus: 1
  #   mem_limit: '1g'
  #   environment:
  #     - SPAN_STORAGE_TYPE=cassandra
  #     - CASSANDRA_SERVERS=jaeger-cassandra
  #     - CASSANDRA_KEYSPACE=jaeger_v1_sourcegraph
  #     - CASSANDRA_LOCAL_DC=sourcegraph
  #   ports:
  #     - '0.0.0.0:16686:16686'
  #   networks:
  #     - sourcegraph
  #   restart: always

  # Description: PostgreSQL database for various data.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 5432/TCP 9187/TCP
  # Ports exposed to the public internet: none
  #
  pgsql:
    container_name: pgsql
    image: 'index.docker.io/sourcegraph/postgres-11.4:19-11-14_b084311b@sha256:072481559d559cfd9a53ad77c3688b5cf583117457fd452ae238a20405923297'
    cpus: 4
    mem_limit: '2g'
    healthcheck:
      test: '/liveness.sh'
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 15s
    volumes:
      - 'pgsql:/data/'
    networks:
      - sourcegraph
    restart: always

  # Description: Redis for storing short-lived caches.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6379/TCP 9121/TCP
  # Ports exposed to the public internet: none
  #
  redis-cache:
    container_name: redis-cache
    image: 'index.docker.io/sourcegraph/redis-cache:20-02-03_da9d71ca@sha256:7820219195ab3e8fdae5875cd690fed1b2a01fd1063bd94210c0e9d529c38e56'
    cpus: 1
    mem_limit: '6g'
    volumes:
      - 'redis-cache:/redis-data'
    networks:
      - sourcegraph
    restart: always
  # Description: Redis for storing semi-persistent data like user sessions.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6379/TCP 9121/TCP
  # Ports exposed to the public internet: none
  #
  redis-store:
    container_name: redis-store
    image: 'index.docker.io/sourcegraph/redis-store:21-01-30_c903717e@sha256:e8467a8279832207559bdfbc4a89b68916ecd5b44ab5cf7620c995461c005168'
    cpus: 1
    mem_limit: '6g'
    volumes:
      - 'redis-store:/redis-data'
    networks:
      - sourcegraph
    restart: always

volumes:
  caddy:
  gitserver-0:
  grafana:
  #jaeger-cassandra:
  lsif-server:
  pgsql:
  prometheus-v2:
  redis-cache:
  redis-store:
  replacer:
  repo-updater:
  searcher-0:
  sourcegraph-frontend-0:
  sourcegraph-frontend-internal-0:
  symbols-0:
  zoekt-0-shared:
networks:
  sourcegraph:
