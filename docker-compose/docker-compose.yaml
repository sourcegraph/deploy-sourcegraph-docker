version: '2.4'
services:
  # Description: Acts as a reverse proxy for all of the sourcegraph-frontend instances
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: 7080 (HTTP) and/or 7443 (HTTPS)
  #
  # Note: nginx/nginx/sourcegraph_backend.conf lists all of the sourcegraph-frontend
  # network addresses that Nginx should proxy. nginx/nginx/sourcegraph_backend.conf
  # needs to be updated with new addresses when scaling the number of soucegraph-frontend
  # replicas.
  nginx:
    container_name: nginx
    image: 'index.docker.io/library/nginx:1.17.7@sha256:8aa7f6a9585d908a63e5e418dc5d14ae7467d2e36e1ab4f0d8f9d059a3d071ce'
    cpus: 1
    mem_limit: '1g'
    volumes:
      - '../nginx:/etc/nginx'
    ports:
      - '0.0.0.0:7080:7080'
    networks:
      - sourcegraph
    restart: always

  # Description: Serves the frontend of Sourcegraph via HTTP(S).
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 6060/TCP, 3080 (HTTP), and/or 3443 (HTTPS)
  # Ports exposed to the public internet: none
  #
  # Note: SRC_GIT_SERVERS, SEARCHER_URL, and SYMBOLS_URL are space-separated
  # lists which each allow you to specify more container instances for scaling
  # purposes. Be sure to also apply such a change here to the frontend-internal
  # service.
  sourcegraph-frontend-0:
    container_name: sourcegraph-frontend-0
    image: 'index.docker.io/sourcegraph/frontend:3.11.4@sha256:d5a01d4824b1fe77b8873af8a4a30ef7edec210b51480285735c7de6f1faa1c0'
    cpus: 4
    mem_limit: '8g'
    environment:
      - GOMAXPROCS=12
      - JAEGER_AGENT_HOST=jaeger-agent
      - PGHOST=pgsql
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SRC_SYNTECT_SERVER=http://syntect-server:9238'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'SYMBOLS_URL=http://symbols-0:3184'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'REPO_UPDATER_URL=http://repo-updater:3182'
      - 'REPLACER_URL=http://replacer:3185'
      - 'LSIF_SERVER_URL=http://lsif-server:3186'
      - 'GRAFANA_SERVER_URL=http://grafana:3370'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3080/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 300s
    volumes:
      - '${DATA_ROOT}/sourcegraph-frontend-0-disk:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Serves the internal Sourcegraph frontend API.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3090/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  sourcegraph-frontend-internal:
    container_name: sourcegraph-frontend-internal
    image: 'index.docker.io/sourcegraph/frontend:3.11.4@sha256:d5a01d4824b1fe77b8873af8a4a30ef7edec210b51480285735c7de6f1faa1c0'
    cpus: 4
    mem_limit: '8g'
    environment:
      - GOMAXPROCS=4
      - PGHOST=pgsql
      - 'SRC_GIT_SERVERS=gitserver-0:3178'
      - 'SRC_SYNTECT_SERVER=http://syntect-server:9238'
      - 'SEARCHER_URL=http://searcher-0:3181'
      - 'SYMBOLS_URL=http://symbols-0:3184'
      - 'INDEXED_SEARCH_SERVERS=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - 'REPO_UPDATER_URL=http://repo-updater:3182'
      - 'REPLACER_URL=http://replacer:3185'
      - 'LSIF_SERVER_URL=http://lsif-server:3186'
      - 'GRAFANA_SERVER_URL=http://grafana:3000'
    volumes:
      - '${DATA_ROOT}/sourcegraph-frontend-internal-0-disk:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Stores clones of repositories to perform Git operations.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 3178/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  gitserver-0:
    container_name: gitserver-0
    image: 'index.docker.io/sourcegraph/gitserver:3.11.4@sha256:2596fe9dba5cb2072ad6fc25249a3012695d7dc0efc1a27c105792c11a1fb94a'
    cpus: 4
    mem_limit: '8g'
    environment:
      - GOMAXPROCS=4
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
    volumes:
      - '${DATA_ROOT}/gitserver-0-disk:/data/repos'
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for indexed text search operations.
  #
  # Disk: 200GB / persistent SSD
  # Network: 100mbps
  # Liveness probe: n/a
  # Ports exposed to other Sourcegraph services: 6072/TCP
  # Ports exposed to the public internet: none
  #
  zoekt-indexserver-0:
    container_name: zoekt-indexserver-0
    image: 'index.docker.io/sourcegraph/zoekt-indexserver:0.0.20191204145522-b470e5f@sha256:84e9de8be269277d6e4711a61d0c9675a44d409a4bf7f7dd1b90a22175095fa7'
    cpus: 8
    mem_limit: '16g'
    environment:
      - GOMAXPROCS=8
      - 'HOSTNAME=zoekt-webserver-0:6070'
      - 'SRC_FRONTEND_INTERNAL=http://sourcegraph-frontend-internal:3090'
    volumes:
      - '${DATA_ROOT}/zoekt-0-shared-disk:/data/index'
    networks:
      - sourcegraph
    restart: always
    hostname: zoekt-indexserver-0
  # Description: Backend for indexed text search operations.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6070/TCP
  # Ports exposed to the public internet: none
  #
  zoekt-webserver-0:
    container_name: zoekt-webserver-0
    image: 'index.docker.io/sourcegraph/zoekt-webserver:0.0.20191204145231-b470e5f@sha256:fc3bfa69fc60b7a049a6646b71e45896cfae8adf3484602d140965c3781463a0'
    cpus: 8
    mem_limit: '50g'
    environment:
      - GOMAXPROCS=8
      - 'HOSTNAME=zoekt-webserver-0:6070'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:6070/healthz' -O /dev/null || exit 1"
      interval: 1s
      timeout: 10s
      retries: 1
    volumes:
      - '${DATA_ROOT}/zoekt-0-shared-disk:/data/index'
    networks:
      - sourcegraph
    restart: always
    hostname: zoekt-webserver-0

  # Description: Backend for text search operations.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3181/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  searcher-0:
    container_name: searcher-0
    image: 'index.docker.io/sourcegraph/searcher:3.11.4@sha256:200803c7f10b13a018f4efe4b5cd543f8f9f28a2b052226aa477f11daf76ccab'
    cpus: 2
    mem_limit: '2g'
    environment:
      - GOMAXPROCS=2
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3181/healthz' -O /dev/null || exit 1"
      interval: 1s
      timeout: 10s
      retries: 1
    volumes:
      - '${DATA_ROOT}/searcher-0-disk:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Rate-limiting proxy for the GitHub API.
  #
  # CPU: 1
  # Memory: 1GB
  # Disk: 1GB / non-persistent SSD (only for read-only config file)
  # Ports exposed to other Sourcegraph services: 3180/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  github-proxy:
    container_name: github-proxy
    image: 'index.docker.io/sourcegraph/github-proxy:3.11.4@sha256:61e88beee0ec61943dac13710d00fe7a387c484207ad42e618ad6a4da926d012'
    cpus: 1
    mem_limit: '1g'
    environment:
      - GOMAXPROCS=1
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
    networks:
      - sourcegraph
    restart: always

  # Description: LSIF HTTP server for code intelligence.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 3186/TCP (server) 3187/TCP (worker)
  # Ports exposed to the public internet: none
  #
  lsif-server:
    container_name: lsif-server
    image: 'index.docker.io/sourcegraph/lsif-server:3.11.4@sha256:b6b84c1f552a11a445bf74bf2d8059ba2ad5527d01961d953f86f4596dafc91a'
    cpus: 2
    mem_limit: '2g'
    environment:
      - GOMAXPROCS=2
      - LSIF_STORAGE_ROOT=/lsif-storage
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3186/ping' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 1
      start_period: 60s
    volumes:
      - '${DATA_ROOT}/lsif-server-disk:/lsif-storage'
    networks:
      - sourcegraph
    restart: always

  # Description: Saved search query runner / notification service.
  #
  # Disk: 1GB / non-persistent SSD (only for read-only config file)
  # Network: 100mbps
  # Liveness probe: n/a
  # Ports exposed to other Sourcegraph services: 3183/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  query-runner:
    container_name: query-runner
    image: 'index.docker.io/sourcegraph/query-runner:3.11.4@sha256:7b5d14e61eadcd8ac279e56d0fb37258e0efc0bb152159b8bf4416215f3ab8a5'
    cpus: 1
    mem_limit: '1g'
    environment:
      - GOMAXPROCS=1
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for replace operations.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3185/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  replacer:
    container_name: replacer
    image: 'index.docker.io/sourcegraph/replacer:3.11.4@sha256:efed9d844a2bf00aed61100bcdc0307fc68e58e890d9e5039b0abae8b659d375'
    cpus: 1
    mem_limit: '512m'
    environment:
      - GOMAXPROCS=1
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3185/healthz' -O /dev/null || exit 1"
      interval: 1s
      timeout: 10s
      retries: 1
    volumes:
      - '${DATA_ROOT}/replacer-disk:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Handles repository metadata (not Git data) lookups and updates from external code hosts and other similar services.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3182/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  repo-updater:
    container_name: repo-updater
    image: 'index.docker.io/sourcegraph/repo-updater:3.11.4@sha256:dd3640fd655809e8913760a05bb371dc95e48e7389ef22dc96a9386c52906398'
    cpus: 4
    mem_limit: '4g'
    environment:
      - GOMAXPROCS=1
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
      - 'GITHUB_BASE_URL=http://github-proxy:3180'
    volumes:
      - '${DATA_ROOT}/repo-updater-disk:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for syntax highlighting operations.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 9238/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  syntect-server:
    container_name: syntect-server
    image: 'index.docker.io/sourcegraph/syntect_server:2b5a3fb@sha256:ef5529cafdc68d5a21edea472ee8ad966878b173044aa5c3db93bc3d84765b1f'
    cpus: 4
    mem_limit: '6g'
    healthcheck:
      test: "wget -q 'http://127.0.0.1:9238/health' -O /dev/null || exit 1"
      interval: 1s
      timeout: 5s
      retries: 1
      start_period: 5s
    networks:
      - sourcegraph
    restart: always

  # Description: Backend for symbols operations.
  #
  # Disk: 128GB / non-persistent SSD
  # Ports exposed to other Sourcegraph services: 3184/TCP 6060/TCP
  # Ports exposed to the public internet: none
  #
  symbols-0:
    container_name: symbols-0
    image: 'index.docker.io/sourcegraph/symbols:3.11.4@sha256:9654f2a524800b18588b1697787beff5625f4d5f71d7caed70c24e319d5e8502'
    cpus: 2
    mem_limit: '4g'
    environment:
      - GOMAXPROCS=2
      - 'SRC_FRONTEND_INTERNAL=sourcegraph-frontend-internal:3090'
      - JAEGER_AGENT_HOST=jaeger-agent
    healthcheck:
      test: "wget -q 'http://127.0.0.1:3184/healthz' -O /dev/null || exit 1"
      interval: 5s
      timeout: 5s
      retries: 1
      start_period: 60s
    volumes:
      - '${DATA_ROOT}/symbols-0-disk:/mnt/cache'
    networks:
      - sourcegraph
    restart: always

  # Description: Prometheus collects metrics and aggregates them into graphs.
  #
  # Disk: 200GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: none (HTTP 9090 should be exposed to admins only)
  #
  prometheus:
    container_name: prometheus
    image: 'index.docker.io/sourcegraph/prometheus:10.0.6@sha256:f681ceb9400f0d546601cbf827ac9c3db16acd37e810da0860cf05d4f42305d1'
    cpus: 4
    mem_limit: '8g'
    volumes:
      - '${DATA_ROOT}/prometheus-v2-disk:/prometheus'
      - '../prometheus:/sg_prometheus_add_ons'
    ports:
      - '0.0.0.0:9090:9090'
    networks:
      - sourcegraph
    restart: always

  # Description: Dashboards and graphs for Prometheus metrics.
  #
  # Disk: 100GB / persistent SSD
  # Ports exposed to other Sourcegraph services: none
  # Ports exposed to the public internet: none (HTTP 3000 should be exposed to admins only)
  #
  # Add the following environment variables if you wish to use an auth proxy with Grafana:
  #
  # 'GF_AUTH_PROXY_ENABLED=true'
  # 'GF_AUTH_PROXY_HEADER_NAME='X-Forwarded-User'
  # 'GF_SERVER_ROOT_URL='https://grafana.example.com'
  grafana:
    container_name: grafana
    image: 'index.docker.io/sourcegraph/grafana:10.0.9@sha256:0132e5602030145803753468497a2d17640164b9c34df4ce2532dd93e4b1f6fc'
    cpus: 1
    mem_limit: '1g'
    volumes:
      - '${DATA_ROOT}/grafana-disk:/var/lib/grafana'
      - '../grafana/datasources:/sg_config_grafana/provisioning/datasources'
      - '../grafana/dashboards:/sg_grafana_additional_dashboards'
    ports:
      - '0.0.0.0:3370:3370'
    networks:
      - sourcegraph
    restart: always

  # Description: Publishes Prometheus metrics about Docker containers.
  #
  # Disk: none
  # Ports exposed to other Sourcegraph services: 8080/TCP
  # Ports exposed to the public internet: none
  #
  cadvisor:
    container_name: cadvisor
    image: 'google/cadvisor:v0.33.0'
    cpus: 1
    mem_limit: '1g'
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:ro'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
      - '/dev/disk/:/dev/disk:ro'
    networks:
      - sourcegraph
    restart: always

  # # Description: Jaeger agent which is local to the host machine (containers on
  # # the machine send trace information to it and it relays to the collector).
  # #
  # # Disk: none
  # # Ports exposed to other Sourcegraph services: 5775/UDP 6831/UDP 6832/UDP (on the same host machine)
  # # Ports exposed to the public internet: none
  # #
  # jaeger-agent:
  #   container_name: jaeger-agent
  #   image: 'index.docker.io/jaegertracing/jaeger-agent@sha256:7ad33c19fd66307f2a3c07c95eb07c335ddce1b487f6b6128faa75d042c496cb'
  #   cpus: 1
  #   mem_limit: '1g'
  #   environment:
  #     - "COLLECTOR_HOST_PORT='jaeger-collector:14267'"
  #   networks:
  #     - sourcegraph
  #   restart: always

  # # Description: Jaeger's Cassandra database for storing traces.
  # #
  # # Disk: 128GB / persistent SSD
  # # Ports exposed to other Sourcegraph services: 9042/TCP
  # # Ports exposed to the public internet: none
  # #
  # jaeger-cassandra:
  #   container_name: jaeger-cassandra
  #   image: 'index.docker.io/library/cassandra:3.11.4@sha256:9f1d47fd23261c49f226546fe0134e6d4ad0570b7ea3a169c521005cb8369a32'
  #   cpus: 4
  #   mem_limit: '8g'
  #   environment:
  #     - 'HEAP_NEWSIZE=1G'
  #     - 'MAX_HEAP_SIZE=6G'
  #     - 'CASSANDRA_DC=sourcegraph'
  #     - 'CASSANDRA_RACK=rack1'
  #     - 'CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch'
  #   volumes:
  #     - '${DATA_ROOT}/jaeger-cassandra-disk/:/var/lib/cassandra'
  #   networks:
  #     - sourcegraph
  #   restart: always

  # # Description: Receives traces from Jaeger agents.
  # #
  # # Disk: none
  # # Ports exposed to other Sourcegraph services: 14267/TCP
  # # Ports exposed to the public internet: none
  # #
  # jaeger-collector:
  #   container_name: jaeger-collector
  #   image: 'index.docker.io/jaegertracing/jaeger-collector:1.11@sha256:0b6d28bb52410f7b50c0f0fc16d7ee391e2e3eca47b713ac88d0891ca8a63cb9'
  #   cpus: 1
  #   mem_limit: '1g'
  #   environment:
  #     - SPAN_STORAGE_TYPE=cassandra
  #     - CASSANDRA_SERVERS=jaeger-cassandra
  #     - CASSANDRA_KEYSPACE=jaeger_v1_sourcegraph
  #   networks:
  #     - sourcegraph
  #   restart: always

  # # Description: Jaeger frontend for querying traces.
  # #
  # # Disk: none
  # # Ports exposed to other Sourcegraph services: none
  # # Ports exposed to the public internet: none (HTTP 16686 should be exposed to admins only)
  # #
  # jaeger-query:
  #   container_name: jaeger-query
  #   image: 'index.docker.io/jaegertracing/jaeger-query:1.11@sha256:cddc521d0166c868931282685a863368ae2c14c4de0c1be38e388ece3080439e'
  #   cpus: 1
  #   mem_limit: '1g'
  #   environment:
  #     - SPAN_STORAGE_TYPE=cassandra
  #     - CASSANDRA_SERVERS=jaeger-cassandra
  #     - CASSANDRA_KEYSPACE=jaeger_v1_sourcegraph
  #     - CASSANDRA_LOCAL_DC=sourcegraph
  #   ports:
  #     - '0.0.0.0:16686:16686'
  #   networks:
  #     - sourcegraph
  #   restart: always

  # Description: PostgreSQL database for various data.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 5432/TCP 9187/TCP
  # Ports exposed to the public internet: none
  #
  pgsql:
    container_name: pgsql
    image: 'index.docker.io/sourcegraph/postgres-11.4:19-11-14_b084311b@sha256:072481559d559cfd9a53ad77c3688b5cf583117457fd452ae238a20405923297'
    cpus: 4
    mem_limit: '2g'
    healthcheck:
      test: '/liveness.sh'
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 15s
    volumes:
      - '${DATA_ROOT}/pgsql-disk:/data/pgdata'
    networks:
      - sourcegraph
    restart: always

  # Description: Redis for storing short-lived caches.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6379/TCP 9121/TCP
  # Ports exposed to the public internet: none
  #
  redis-cache:
    container_name: redis-cache
    image: index.docker.io/sourcegraph/redis-cache:19-04-16_6891de82@sha256:4cbfac8af0abb673899250d4fd859cc477d6426de519e9deb71e454e18322499
    cpus: 1
    mem_limit: '6g'
    volumes:
      - '${DATA_ROOT}/redis-cache-disk:/redis-data'
    networks:
      - sourcegraph
    restart: always
  # Description: Redis for storing semi-persistent data like user sessions.
  #
  # Disk: 128GB / persistent SSD
  # Ports exposed to other Sourcegraph services: 6379/TCP 9121/TCP
  # Ports exposed to the public internet: none
  #
  redis-store:
    container_name: redis-store
    image: 'index.docker.io/sourcegraph/redis-store:19-04-16_6891de821@sha256:56426d601ce1f6d63088fea1cefa61f69a2e809c7d90fc1d157cca63cf81b277'
    cpus: 1
    mem_limit: '6g'
    volumes:
      - '${DATA_ROOT}/redis-store-disk:/redis-data'
    networks:
      - sourcegraph
    restart: always

networks:
  sourcegraph:
